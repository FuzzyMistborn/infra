---

- name: Set hostname
  hostname:
    name: omada

- name: create config directories
  file:
    path: "/home/{{main_username}}/{{ item }}"
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_groupname }}"
  loop:
    - docker
    - docker/diun
    - docker/omada

#### DIUN
- name: Copy DIUN Config Template
  template:
    src: diun_config.yml.j2
    dest: /home/{{ main_username }}/docker/diun/config.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

#### Bash Alias

- name: Setup bash aliases
  lineinfile:
    dest: "/etc/bash_aliases"
    create: yes
    group: root
    line: "alias {{ item.alias }}='{{ item.command }}'"
    mode: 0644
    owner: root
    regexp: "^alias {{ item.alias }}="
  with_items:
    - {alias: "arsnapshot", command: "autorestic exec -av -- snapshots"}
    - {alias: "arbackup", command: "autorestic backup -a"}
    - {alias: "arprune", command: "autorestic forget -a -- prune"}

- name: Source aliases file
  lineinfile:
    dest: /etc/bash.bashrc
    line: 'source /etc/bash_aliases'
    state: present

### Restic
- name: Copy Autorestic Config Template
  template:
    src: autorestic.yml.j2
    dest: /home/{{ main_username }}/.autorestic.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Backup Restore
- name: Create restore script
  copy:
    dest: /home/{{ main_username }}/restore.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      /usr/local/bin/autorestic restore -f -l docker --from synology_docker --to /home/{{main_username}}/docker
  when: pull_backup == true
- name: Run restore script
  command: /bin/bash ./restore.sh
  args:
    chdir: "/home/{{main_username}}"
  when: pull_backup == true
- name: Remove restore script
  file:
    path: /home/{{ main_username }}/restore.sh
    state: absent
  when: pull_backup == true
