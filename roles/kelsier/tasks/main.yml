---
- name: SSH Keys
  authorized_key:
    user: "{{ main_username }}"
    state: present
    key: "{{ secret_kelsier_hass_ssh }}"

- name: Fix SFTP for Ansible
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    state: present
    regexp: "Subsystem sftp*"
    line: "Subsystem sftp internal-sftp"

- name: Restart ssh
  service:
    name: sshd
    state: restarted

- name: Copy SSH files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
  loop:
    - {src: "auth_commands.sh.j2", dest: "/home/{{ main_username }}/.ssh/auth_commands.sh", mode: "755"}
    - {src: "ssh_config.j2", dest: "/home/{{ main_username }}/.ssh/config", mode: "600"}

- name: Add SSH Keys
  copy:
    dest: /home/{{ main_username }}/.ssh/{{ item.dest }}
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: "{{ item.key }}"
  with_items:
    - dest: kelsier_lxcs
      key: "{{ secret_kelsier_lxc_ssh }}"
    - dest: kelsier_vps
      key: "{{ secret_kelsier_vps_ssh }}"
    - dest: parentsvpn
      key: "{{ secret_parentsvpn_ssh }}"
    - dest: github
      key: "{{ secret_github_ssh }}"

# Sudoers file
- name: Add sudoers file for main user
  template:
    src: sudoers_main_user.j2
    dest: /etc/sudoers.d/{{ main_username }}
    owner: root
    group: root
    mode: 0440

### AUR
- name: Install AUR Packages
  kewlfft.aur.aur:
    use: yay
    name:
      - "{{ item.name }}"
    state: present
  become_user: ansible
  become: yes
  with_items:
    - "{{ aur_package_list }}"

### Flatpak
- name: Add the flathub flatpak repository remote
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: system

# fstab/disk mounts
- name: make sure disks unmounted
  mount:
    path: "{{ item.path }}"
    state: unmounted
  with_items:
    - "{{ data_disks }}"
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"

- name: create /mnt points
  file:
    dest: "{{ item.path }}"
    state: directory
    owner: "{{ main_username }}"
    group: nobody
    mode: 0777
  with_items:
    - "{{ data_disks }}"
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"

- name: Add smbcredentials
  copy:
    dest: /home/{{ main_username }}/.smbcredentials
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: |
      user=samba
      password={{ secret_samba_pass }}
      domain=cosmere

- name: mount disks
  mount:
    path: "{{ item.path }}"
    src: "{{ item.source }}"
    fstype: "{{ item.fs }}"
    opts: "{{ item.opts }}"
    # change to 'mounted' to auto mount versus 'present' for just loaded into fstab
    state: mounted
  with_items:
    - "{{ data_disks }}"
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"

### Logiops
- name: Copy logid.cfg file
  copy:
    src: logid.cfg
    dest: /etc/logid.cfg
    owner: root
    group: root
    mode: 0644

### Dolphin/ZSH
- name: Copy config files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
  with_items:
    - src: "kde/dolphinrc"
      dest: "/home/{{ main_username }}/.config/dolphinrc"
    - src: "kde/khotkeysrc"
      dest: "/home/{{ main_username }}/.config/khotkeysrc"
    - src: "kde/dolphinui.rc"
      dest: "/home/{{ main_username }}/.local/share/kxmlgui5/dolphin/dolphinui.rc"
    - src: "kde/konsoleprofile"
      dest: "/home/{{ main_username }}/.local/share/konsole/ZSH.profile"
    - src: "kde/Default.layout.latte"
      dest: "/home/{{ main_username }}/.config/latte/Default.layout.latte"
    - src: "zsh/zshrc"
      dest: "/home/{{ main_username }}/.zshrc"
    - src: "zsh/p10k.zsh"
      dest: "/home/{{ main_username }}/.p10k.zsh"

#### NUT
- name: Copy nut folder
  copy:
    src: etc/nut/{{ item }}
    dest: /etc/nut/{{ item }}
    owner: root
    group: nut
    mode: 0640
  with_items:
    - 'nut.conf'
    - 'ups.conf'
    - 'upsd.conf'
    - 'upsd.users'
    - 'upsmon.conf'
  when: install_nut == true

- name: Copy NUT script
  copy:
    src: nut.sh
    dest: /home/{{ main_username }}
    mode: +x
  when: install_nut == true

- name: Run NUT script
  command: /bin/bash ./nut.sh
  args:
    chdir: /home/{{ main_username }}
    creates: /home/{{ main_username }}/nut.sh
  when: install_nut == true

### Backup Restore
- name: Create restore script
  copy:
    dest: /home/{{ main_username }}/restore.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      /usr/local/bin/autorestic restore -f -l home --from synology_docker --to /home/{{ main_username }}/docker
  when: pull_backup == true
- name: Run restore script
  command: /bin/bash ./restore.sh
  args:
    chdir: "/home/{{ main_username }}"
  when: pull_backup == true
- name: Remove restore script
  file:
    path: /home/{{ main_username }}/restore.sh
    state: absent
  when: pull_backup == true

#### Misc
- name: Enable IPv4 forwarding for wireguard
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    reload: yes

- name: Create wireguard conf
  copy:
    dest: /etc/wireguard/wg0.conf
    owner: root
    group: root
    mode: 0600
    content: "{{ secret_parents_wireguard_config }}"

- name: Install plugin for MPV to use KDEConnect
  get_url:
    url: https://github.com/hoyon/mpv-mpris/releases/download/0.5/mpris.so
    dest: /home/{{ main_username }}/.config/mpv/scripts
    force: yes
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

- name: Enable WOL ethtool
  command: ethtool -s eno1 wol bg

- name: Enable WOL nmcli
  command: sudo nmcli c modify "Wired connection 1" 802-3-ethernet.wake-on-lan magic

- name: Reload TLP/Cronie/bluetooth/fstrim
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: "{{ item }}"
  with_items:
    - cronie
    - bluetooth
    - fstrim.timer

- name: enable bluetooth auto-power on
  lineinfile:
    dest: "/etc/bluetooth/main.conf"
    state: present
    regexp: "^AutoEnable"
    line: "AutoEnable=true"

- name: add main user to vboxusers group for USB
  user:
    name: "{{ main_username }}"
    append: yes
    groups: vboxusers

### Fix Delayed Shutdown
- name: Fix Delayed Shutdown
  lineinfile:
    dest: "/etc/systemd/system.conf"
    state: present
    regexp: "#DefaultTimeoutStopSec"
    line: "DefaultTimeoutStopSec=15s"
