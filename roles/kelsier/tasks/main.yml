---

- name: SSH Keys
  authorized_key:
    user: "{{ main_username }}"
    state: present
    key: "{{secret_kelsier_hass_ssh}}"

- name: Copy SSH files
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    mode: "{{item.mode}}"
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
  loop:
    - {src: "auth_commands.sh.j2", dest: "/home/{{main_username}}/.ssh/auth_commands.sh", mode: "755"}
    - {src: "ssh_config.j2", dest: "/home/{{main_username}}/.ssh/config", mode: "600"}

- name: Add Kelsier LXC SSH Key
  copy:
    dest: /home/{{ main_username }}/.ssh/kelsier_lxcs
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: "{{ secret_kelsier_lxc_ssh }}"

- name: Add Kelsier VPS SSH Key
  copy:
    dest: /home/{{ main_username }}/.ssh/kelsier_vps
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: "{{ secret_kelsier_vps_ssh }}"

- name: Add Github SSH Key
  copy:
    dest: /home/{{ main_username }}/.ssh/github
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: "{{ secret_github_ssh }}"

# Sudoers file

- name: Add sudoers file for main user
  template:
    src: sudoers_main_user.j2
    dest: /etc/sudoers.d/{{main_username}}
    owner: root
    group: root
    mode: 0440

### AUR

- name: Install AUR Packages
  kewlfft.aur.aur:
    use: yay
    name:
      - mqtt-explorer-appimage  # Other package broken
      - telegraf
      - visual-studio-code-bin
      - squeezelite
      - bauh
      - logiops
      - protonmail-bridge
      - zoom
      - jellyfin-media-player
      - brother-hl2270dw
      - gwe
      - esphome
      - python-esphome-dashboard
      - popsicle
      - psst
      - ventoy
      - remmina-git
      # - ckan  # Currently broken, use Mono
      # - ferdi # Conflict package, install manually
    state: present
  become_user: ansible
  become: yes

### Flatpak
- name: Add the flathub flatpak repository remote
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: system

# - name: Install flatpaks
#   community.general.flatpak:
#     name:
#       - 
#     state: present
#     method: user
#   become_user: "{{main_username}}"
#   become: yes

# fstab/disk mounts

- name: make sure disks unmounted
  mount:
    path: "{{ item.path }}"
    state: unmounted
  with_items:
    - "{{ data_disks }}"
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"

- name: create /mnt points
  file:
    dest: "{{ item.path }}"
    state: directory
    owner: "{{main_username}}"
    group: nobody
    mode: 0777
  with_items:
    - "{{ data_disks }}"
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"

- name: Add smbcredentials
  copy:
    dest: /home/{{main_username}}/.smbcredentials
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: |
      user=samba
      password={{secret_samba_pass}}
      domain=cosmere

- name: mount disks
  mount:
    path: "{{ item.path }}"
    src: "{{ item.source }}"
    fstype: "{{ item.fs }}"
    opts: "{{ item.opts }}"
    # change to 'mounted' to auto mount versus 'present' for just loaded into fstab
    state: mounted
  with_items:
    - "{{ data_disks }}"
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"

### Logiops
- name: Copy logid.cfg file
  copy:
    src: logid.cfg
    dest: /etc/logid.cfg
    owner: root
    group: root
    mode: 0644 

#### NUT

- name: Copy nut folder
  copy:
    src: etc/nut/{{item}}
    dest: /etc/nut/{{item}}
    owner: root
    group: nut
    mode: 0640
  with_items:
    - 'nut.conf'
    - 'ups.conf'
    - 'upsd.conf'
    - 'upsd.users'
    - 'upsmon.conf'
  when: install_nut == true

- name: Copy NUT script
  copy:
    src: nut.sh
    dest: /home/{{main_username}}
    mode: +x
  when: install_nut == true

- name: Run NUT script
  command: /bin/bash ./nut.sh
  args:
    chdir: /home/{{main_username}}
    creates: /home/{{main_username}}/nut.sh
  when: install_nut == true

### Backup Restore
- name: Create restore script
  copy:
    dest: /home/{{ main_username }}/restore.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      /usr/local/bin/autorestic restore -f -l home --from synology_docker --to /home/{{main_username}}/docker
  when: pull_backup == true
- name: Run restore script
  command: /bin/bash ./restore.sh
  args:
    chdir: "/home/{{main_username}}"
  when: pull_backup == true
- name: Remove restore script
  file:
    path: /home/{{ main_username }}/restore.sh
    state: absent
  when: pull_backup == true

#### Bash Alias

- name: Setup bash aliases
  lineinfile:
    dest: "/etc/bash_aliases"
    create: yes
    group: root
    line: "alias {{ item.alias }}='{{ item.command }}'"
    mode: 0644
    owner: root
    regexp: "^alias {{ item.alias }}="
  with_items:
    - {alias: "arsnapshot", command: "autorestic exec -av -- snapshots"}
    - {alias: "arbackup", command: "autorestic backup -a"}
    - {alias: "arprune", command: "autorestic forget -a -- prune"}

- name: Source aliases file
  lineinfile:
    dest: /etc/bash.bashrc
    line: 'source /etc/bash_aliases'
    state: present

#### Misc

- name: Clean up Nautilus
  lineinfile:
    dest: "/home/{{main_username}}/.config/user-dirs.dirs"
    regexp: "^{{ item.find }}"
    line: "{{ item.replace }}"
  with_items:
    - {find: 'XDG_DESKTOP_DIR', replace: '#XDG_DESKTOP_DIR="$HOME/Desktop"'}
    - {find: 'XDG_TEMPLATES_DIR', replace: '#XDG_TEMPLATES_DIR="$HOME/Templates"'}
    - {find: 'XDG_PUBLICSHARE_DIR', replace: '#XDG_PUBLICSHARE_DIR="$HOME/Public"'}
    - {find: 'XDG_MUSIC_DIR', replace: '#XDG_MUSIC_DIR="$HOME/Music"'}
    - {find: 'XDG_VIDEOS_DIR', replace: '#XDG_VIDEOS_DIR="$HOME/Videos"'}

- name: Enable IPv4 forwarding for wireguard
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    reload: yes

- name: Enable WOL ethtool
  command: ethtool -s eno1 wol g

- name: enable WOL tlp.conf
  lineinfile:
    dest: "/etc/tlp.conf"
    state: present
    regexp: "^WOL_DISABLE"
    line: "WOL_DISABLE=N"

- name: Reload TLP/Cronie
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: "{{ item }}"
  with_items:
    - tlp
    - cronie
