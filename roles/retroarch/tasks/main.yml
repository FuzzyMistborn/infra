---
### Configuration
- name: check for retroarch config file
  stat:
    path: "{{retroarch_config_path}}"
  register: retroarch_config

- name: set config settings
  lineinfile:
    dest: "{{retroarch_config_path}}"
    state: present
    regexp: "{{item.existing}}"
    line: '{{item.updated}}'
  with_items:
    - {existing: '^core_updater_buildbot_cores_url =', updated: 'core_updater_buildbot_cores_url = "http://buildbot.libretro.com/nightly/linux/{{retroarch_distro}}/latest/"'}
    - {existing: '^content_show_images =', updated: 'content_show_images = "false"'}
    - {existing: '^content_show_music =', updated: 'content_show_music = "false"'}
    - {existing: '^content_show_netplay =', updated: 'content_show_netplay = "false"'}
    - {existing: '^content_show_video =', updated: 'content_show_video = "false"'}
    - {existing: '^menu_timedate_style =', updated: 'menu_timedate_style = "5"'}
    - {existing: '^playlist_sublabel_last_played_style =', updated: 'playlist_sublabel_last_played_style = "1"'}
    - {existing: '^ozone_menu_color_theme =', updated: 'ozone_menu_color_theme = "2"'}
    - {existing: '^assets_directory =', updated: 'assets_directory = "{{retroarch_config_path}}/assets"'}
  when: retroarch_config.stat.exists == true

- name: set kelsier controller config settings
  lineinfile:
    dest: "{{retroarch_config_path}}"
    state: present
    regexp: "{{item.existing}}"
    line: '{{item.updated}}'
  with_items:
    - {existing: '^input_driver =', updated: 'input_driver = "sdl2"'}
    - {existing: '^input_joypad_driver =', updated: 'input_joypad_driver = "sdl2"'}
  when: hostname == 'kelsier' and retroarch_config.stat.exists == true

### Cores
- name: check for retroarch cores dir
  stat:
    path: "{{retroarch_config_dir}}/cores"
  register: retroarch_core

- name: download core-info
  git:
      repo: https://github.com/libretro/libretro-core-info.git
      dest: "{{retroarch_config_dir}}/cores"
  when: retroarch_core.stat.exists == true

- name: download cores (all)
  unarchive:
    src: https://buildbot.libretro.com/nightly/linux/{{retroarch_distro}}/latest/{{item}}
    dest: "{{retroarch_config_path}}/cores"
    remote_src: yes
    owner: "{{retroarch_user}}"
    group: "{{retroarch_user}}"
  with_items:
    - duckstation_libretro.so.zip
    - mupen64plus_next_libretro.so.zip
    - bsnes_libretro.so.zip
    - mgba_libretro.so.zip
    - gambatte_libretro.so.zip
    - nestopia_libretro.so.zip
    - stella_libretro.so.zip
    - blastem_libretro.so.zip
    - dolphin_libretro.so.zip
    - pcsx2_libretro.so.zip
when: retroarch_core.stat.exists == true

- name: download cores (x86)
  unarchive:
    src: https://buildbot.libretro.com/nightly/linux/{{retroarch_distro}}/latest/{{item}}
    dest: "{{retroarch_config_path}}/cores"
    remote_src: yes
    owner: "{{retroarch_user}}"
    group: "{{retroarch_user}}"
  with_items:
    - mupen64plus_next_libretro.so.zip
    - dolphin_libretro.so.zip
    - pcsx2_libretro.so.zip
  when: ansible_architecture == "x86_64" and retroarch_core.stat.exists == true

### Add ROMs/create playlists
- name: check for retroarch playlists dir
  stat:
    path: "{{retroarch_config_dir}}/playlists"
  register: retroarch_playlist

- name: Copy playlist generator script
  template:
    src: create_playlist.py.j2
    dest: "{{retroarch_config_dir}}/create_playlist.py"
    owner: "{{retroarch_user}}"
    group: "{{retroarch_user}}"
    mode: +x

- name: Install CATT python package
  command: python3 {{retroarch_config_dir}}/create_playlist.py
  when: retroarch_playlist.stat.exists == true

### Syncthing
- name: Create .stignore file
  copy:
    dest: "{{retroarch_config_dir}}"
    owner: "{{retroarch_user}}"
    group: "{{retroarch_user}}"
    mode: 0664
    content: |
      !/assets
      !/saves
      !/states
      !/system
      !/thumbnails
      *