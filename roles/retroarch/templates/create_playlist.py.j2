'''
# Retroarch Playlist Maker

## Source for .dat files:
https://github.com/libretro/libretro-database/tree/master/metadat/fbneo-split
https://github.com/libretro/libretro-database/tree/master/metadat/mame-split

## Information on how playlists work in Retroarch:
https://docs.libretro.com/guides/roms-playlists-thumbnails/

## Modified and ansible-ized by FuzzyMistborn from https://github.com/parklez/retroarch-lakka-playlist-maker
'''
import os
import json


class Playlist:

    playlists = []

    def __init__(self, name: str, source: str, output: str, filters=[], core='', core_name='', search_recursively=False):
        '''Class that defines a playlist.

        Args:
            name (str): Name of the playlist following libretro's standard: https://github.com/libretro/libretro-database
            source (str): Path to folder containing ROMs.
            output (str): Path to '/retroarch/playlists'.
            filters (list, optional): Allowed file extentions without comma. Defaults to [].
            core (str, optional): Name of the core to be utilized. Defaults to 'DETECT'.
            core_name (str, optional): Full name of core. Defaults to 'DETECT'.
            search_recursively (bool): If True, scanner walks through subdirs recursively.
        '''
        self.name = name
        self.source = source
        self.output = output
        self.filters = filters
        self.core = core
        self.core_name = core_name
        self.search_recursively = search_recursively
        self.files = self.scan_files()
        Playlist.playlists.append(self)

    def scan_files(self) -> list:
        files = []
        try:
            if self.search_recursively:
                for root, _dirs, _files in os.walk(self.source):
                    for file_name in _files:
                        rel_dir = os.path.relpath(root, self.source)
                        rel_file = os.path.join(rel_dir, file_name)
                        if rel_file.startswith('.'):
                            rel_file = rel_file[2:]
                        files.append(rel_file)
            else:
                # Listing only files within a directory:
                files = [f for f in os.listdir(self.source) if os.path.isfile(os.path.join(self.source, f))]
            if not files:
                print(f'No files found: "{self.source}".')
        except FileNotFoundError:
            print(f'Directory not found: "{self.source}".')
        finally:
            return files

    def create_playlist(self):
        playlist = {
            'version': '1.5',
            'default_core_path': self.core,
            'default_core_name': self.core_name,
            'label_display_mode': 3,
            'right_thumbnail_mode': 0,
            'left_thumbnail_mode': 0,
            'sort_mode': 0,
            'items': []
            }

        files = self.iterate_items()

        playlist['items'] = files
        print(f'[{len(files)}] {self.name}')
        self.write_to_disk(playlist)

    def iterate_items(self) -> list:
        files = []
        for file in self.files:
            # If we have filters, and current file is not within it... ignore it!
            if self.filters and file.split('.')[-1] not in self.filters:
                pass
            # else, no filters OR the file is within the filters:
            else:
                name = os.path.split(file)[-1]
                name = name[:name.rfind('.')]
                item = {
                    'path': os.path.join(self.source, file),
                        'label': name,
                        'core_path': 'DETECT',
                        'core_name': 'DETECT',
                        'crc32': 'DETECT',
                        'db_name': self.name + '.lpl'
                    }
                files.append(item)

        return files

    def write_to_disk(self, playlist):
        file = os.path.join(self.output, self.name + '.lpl')

        with open(file, 'w') as f:
            json.dump(playlist, f, indent=4)


def create_everything():
    for item in Playlist.playlists:
        item.create_playlist()
    print('\n[Done] Playlist(s) sucessfully created or updated.')

# Entry examples
RETROARCH_PLAYLIST_PATH = r'{{ retroarch_config_dir }}/playlists/'

Playlist('Nintendo - Game Boy Advance', r'{{ retroarch_roms_dir }}/gba/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/mgba_libretro.so', core_name='Nintendo - Game Boy Advance (mGBA)')
Playlist('Nintendo - Game Boy Color', r'{{ retroarch_roms_dir }}/gbc/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/gambatte_libretro.so', core_name='Nintendo - Game Boy / Color (Gambatte)')
Playlist('Nintendo - Game Boy', r'{{ retroarch_roms_dir }}/gb/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/gambatte_libretro.so', core_name='Nintendo - Game Boy / Color (Gambatte)')
Playlist('Nintendo - Nintendo Entertainment System', r'{{ retroarch_roms_dir }}/nes/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/nestopia_libretro.so', core_name='Nintendo - NES / Famicom (Nestopia UE)')
Playlist('Sony - PlayStation', r'{{ retroarch_roms_dir }}/psx/', RETROARCH_PLAYLIST_PATH, ['iso', 'cue'], core='{{ retroarch_config_dir }}/cores/duckstation_libretro.so', core_name='Sony - Playstation (DuckStation)')
{% if ansible_architecture == "armv7l" %}
Playlist('Atari - 2600', r'{{ retroarch_roms_dir }}/atari2600/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/stella_libretro.so', core_name='Atari - 2600 (Stella 2014)')
Playlist('Nintendo - Super Nintendo Entertainment System', r'{{ retroarch_roms_dir }}/snes/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/snes9x_libretro.so', core_name='Nintendo - SNES / SFC (Snes9x)')
Playlist('Sega - Mega Drive - Genesis', r'{{ retroarch_roms_dir }}/genesis/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/picodrive_libretro.so', core_name='Sega - Mega Drive - Genesis (PicoDrive)')
{% endif %}
{% if ansible_architecture == "x86_64" %}
Playlist('Atari - 2600', r'{{ retroarch_roms_dir }}/atari2600/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/stella_libretro.so', core_name='Atari - 2600 (Stella)')
Playlist('Nintendo - Nintendo 64', r'{{ retroarch_roms_dir }}/n64/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/mupen64plus_next_libretro.so', core_name='Nintendo - Nintendo 64 (Mupen64Plus-Next)')
Playlist('Nintendo - Wii', r'{{ retroarch_roms_dir }}/wii/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/dolphin_libretro.so', core_name='Nintendo - GameCube / Wii (Dolphin)')
Playlist('Nintendo - GameCube', r'{{ retroarch_roms_dir }}/gc/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/dolphin_libretro.so', core_name='Nintendo - GameCube / Wii (Dolphin)')
Playlist('Nintendo - Super Nintendo Entertainment System', r'{{ retroarch_roms_dir }}/snes/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/bsnes_libretro.so', core_name='Nintendo - SNES / SFC (bsnes)')
Playlist('Sega - Mega Drive - Genesis', r'{{ retroarch_roms_dir }}/genesis/', RETROARCH_PLAYLIST_PATH, core='{{ retroarch_config_dir }}/cores/blastem_libretro.so', core_name='Sega - Mega Drive - Genesis (BlastEm)')
Playlist('Sony - PlayStation 2', r'{{ retroarch_roms_dir }}/ps2/', RETROARCH_PLAYLIST_PATH, ['iso', 'cue'], core='{{ retroarch_config_dir }}/cores/duckstation_libretro.so', core_name='Sony - PlayStation 2 (PCSX2)')
{% endif %}

if __name__ == '__main__':
    # change_mode()
    create_everything()
