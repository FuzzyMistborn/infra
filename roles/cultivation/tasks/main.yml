---

- name: create config directories
  file:
    path: "/home/{{main_username}}/{{ item }}"
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_groupname }}"
  loop:
    - docker
    - docker/diun
    - scripts

#### DIUN
- name: Copy DIUN Config Template
  template:
    src: diun_config.yml.j2
    dest: /home/{{ main_username }}/docker/diun/config.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Telegraf
- name: Install Proxmoxer
  pip:
    name: github3.py
- name: Get latest release for telegraf
  community.general.github_release:
    user: influxdata
    repo: telegraf
    action: latest_release
  register: telegraf_ver_latest
  when: telegraf_ver is undefined
- name: Set telegraf version
  set_fact:
    telegraf_ver: "{{ telegraf_ver_latest.tag  | regex_replace('v') }}"
  when: telegraf_ver is undefined
- name: Install Telegraf
  apt:
    deb: https://dl.influxdata.com/telegraf/releases/telegraf_{{telegraf_ver}}-1_amd64.deb

- name: Copy Telegraf config
  template:
    src: telegraf.conf.j2
    dest: /etc/telegraf/telegraf.conf
    owner: root
    group: root
    mode: 0644
- name: Add Telegraf user to docker group
  user:
    name: telegraf
    groups: docker
    append: yes
- name: Enable/Start Telegraf
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: telegraf

#### Bash Alias

- name: Setup bash aliases
  lineinfile:
    dest: "/etc/bash_aliases"
    create: yes
    group: root
    line: "alias {{ item.alias }}='{{ item.command }}'"
    mode: 0644
    owner: root
    regexp: "^alias {{ item.alias }}="
  with_items:
    - { alias: "arsnapshot", command: "autorestic exec -av -- snapshots" }
    - { alias: "arbackup", command: "autorestic backup -a" }
    - { alias: "arprune", command: "autorestic forget -a -- prune" }

- name: Source aliases file
  lineinfile:
    dest: /etc/bash.bashrc
    line: 'source /etc/bash_aliases'
    state: present

### Restic
- name: Update Restic to latest version
  command: "/usr/bin/restic self-update"

- name: Install Autorestic
  shell: curl -s https://raw.githubusercontent.com/CupCakeArmy/autorestic/master/install.sh | sudo bash

- name: Copy Autorestic Config Template
  template:
    src: autorestic.yml.j2
    dest: /home/{{ main_username }}/.autorestic.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Backup Restore
- name: Create restore script
  copy:
    dest: /home/{{ main_username }}/restore.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      /usr/local/bin/autorestic restore -f -l docker --from synology_docker --to /home/{{main_username}}/docker
  when: pull_backup == true
- name: Run restore script
  command: /bin/bash ./restore.sh
  args:
    chdir: "/home/{{main_username}}"
  when: pull_backup == true
- name: Remove restore script
  file:
    path: /home/{{ main_username }}/restore.sh
    state: absent
  when: pull_backup == true

### Rsyslog
- name: Copy rsyslog config templates
  template:
    src: "{{item.src}}"
    dest: /etc/{{item.dest}}
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'rsyslog.conf.j2', dest: 'rsyslog.conf' }
    - { src: 'bitwarden.conf.j2', dest: 'rsyslog.d/bitwarden.conf' }

- name: restart rsyslog service
  service:
    name: rsyslog
    enabled: 'true'
    state: restarted

#### Cronjobs
- name: "Main User Cronjobs"
  cron:
    user: "{{ main_username }}"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    day: "{{ item.day }}"
    state: present
  with_items:
    - { job: "curl -fsS -m 10 --retry 5 -o /dev/null {{secret_hc_cultivation_purge}}/start && /usr/local/bin/autorestic forget -a -- prune && curl -fsS -m 10 --retry 5 -o /dev/null {{secret_hc_cultivation_purge}}", name: "Restic Prune", hour: "22", minute: "15", weekday: "1", day: "*" }
    - { job: "curl -fsS -m 10 --retry 5 -o /dev/null {{secret_hc_restic_check_cultivation}}/start && /usr/local/bin/autorestic exec -a -- check && curl -fsS -m 10 --retry 5 -o /dev/null {{secret_hc_restic_check_cultivation}}", name: "Restic Check", hour: "2", minute: "15", weekday: "*", day: "1" }

- name: "Root Cronjobs"
  cron:
    user: "root"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    state: present
  with_items:
    - { job: "/usr/local/bin/autorestic backup -a -c /home/{{main_username}}/.autorestic.yml", name: "Media Backup", hour: "0", minute: "15", weekday: "*" }
