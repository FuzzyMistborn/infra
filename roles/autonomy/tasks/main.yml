---
- name: create config directories
  file:
    path: /home/{{ main_username }}/{{ item }}
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_groupname }}"
  loop:
    - .config/catt
    - docker
    - docker/diun
    - scripts

### SSH
- name: SSH Keys
  authorized_key:
    user: "{{ item.user }}"
    state: present
    key: "{{ item.ssh }}"
  loop:
    - {user: "{{ main_username }}", ssh: "{{ secret_hass_ssh }}"}
    - {user: "{{ main_username }}", ssh: "{{ secret_main_user_code_server_ssh }}"}

#### Scripts

- name: Generate commute image bash script
  copy:
    dest: /home/{{ main_username }}/scripts/traffic.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      {{ secret_traffic_code }}

- name: Generate weather cast bash file
  copy:
    dest: /home/{{ main_username }}/scripts/cast_weather.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: "{{ secret_catt_weather }}"

- name: Create traffic cast bash file
  copy:
    dest: /home/{{ main_username }}/scripts/cast_traffic.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: "{{ secret_catt_traffic }}"

- name: Copy scripts
  copy:
    src: scripts/{{ item.path }}
    dest: /home/{{ main_username }}/scripts/{{ item.path }}
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: "{{ item.mode }}"
  with_items:
    - {path: "auth_commands.sh", mode: "+x"}

- name: Copy backup script templates
  template:
    src: "{{ item.src }}"
    dest: /home/{{ main_username }}/scripts/{{ item.dest }}
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
  with_items:
    - {src: 'cast_frontdoor.sh.j2', dest: 'cast_frontdoor.sh'}
    - {src: 'cast_stop.sh.j2', dest: 'cast_stop.sh'}
    - {src: 'docker.sh.j2', dest: 'docker.sh'}

### CATT

- name: Install CATT python package
  command: pip3 install catt

- name: Set CATT Defaults
  copy:
    dest: /home/{{ main_username }}/.config/catt/catt.cfg
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0644
    content: |
      [options]
      device = Kitchen Hub

      [aliases]

#### DIUN
- name: Copy DIUN Config Template
  template:
    src: diun_config.yml.j2
    dest: /home/{{ main_username }}/docker/diun/config.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

#### HASS Git

- name: Clone HASS GitHub Repo
  git:
    repo: git@github.com:FuzzyMistborn/hass-docker.git
    dest: /home/{{ main_username }}/hass_docker
    accept_hostkey: true
    key_file: /home/{{ main_username }}/.ssh/github
  when: clone_git == true

- name: Clone NodeRed GitHub Repo
  git:
    repo: git@github.com:FuzzyMistborn/hass-nodered.git
    dest: /home/{{ main_username }}/docker/nodered
    accept_hostkey: true
    key_file: /home/{{ main_username }}/.ssh/github
  when: clone_git == true

### Backup Restore
- name: Create restore script
  copy:
    dest: /home/{{ main_username }}/restore.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      /usr/local/bin/autorestic restore -f -l docker --from synology_docker --to /
      /usr/local/bin/autorestic restore -f -l hass_docker --from synology_hass_docker --to /
      /usr/local/bin/autorestic restore -f -l hass_docker_beta --from synology_hass_docker_beta --to /
  when: pull_backup == true
- name: Run restore script
  command: /bin/bash ./restore.sh
  args:
    chdir: "/home/{{ main_username }}"
  when: pull_backup == true
- name: Remove restore script
  file:
    path: /home/{{ main_username }}/restore.sh
    state: absent
  when: pull_backup == true

### Rsyslog
- name: Copy rsyslog config templates
  template:
    src: "{{ item.src }}"
    dest: /etc/{{ item.dest }}
    owner: root
    group: root
    mode: 0644
  with_items:
    - {src: 'rsyslog.conf.j2', dest: 'rsyslog.conf'}
    - {src: 'ha.conf.j2', dest: 'rsyslog.d/ha.conf'}

- name: restart rsyslog service
  service:
    name: rsyslog
    enabled: 'true'
    state: restarted
