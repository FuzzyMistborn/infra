---

- name: get status of webhook_install_path
  stat:
    path: "{{ webhook_install_path }}"
  register: is_installed

- name: set webhook installed
  set_fact:
    webhook_is_installed: "{{ is_installed.stat.exists }}"

- name: check webhook version
  shell: "{{ webhook_install_path }} --version | awk '{ print $3 }' | cut -c 1-"
  changed_when: false
  register: installed_version_registered
  when: webhook_is_installed == True

- name: get latest release
  uri:
    url: https://api.github.com/repos/adnanh/webhook/releases/latest
    url_username: "{{ github_api_user | default (omit) }}"
    url_password: "{{ github_api_pass | default (omit) }}"
    return_content: true
    force_basic_auth: "{{ github_api_auth | default (omit) }}"
  register: release_version_registered
  when: webhook_download_latest_ver == True

- name: set webhook version (latest)
  set_fact:
    webhook_ver: "{{ release_version_registered.json.tag_name }}"
  when: webhook_download_latest_ver == True

- name: set webhook version (pinned)
  set_fact:
    webhook_ver: "{{ webhook_pinned_ver }}"
  when: webhook_download_latest_ver == False

- block:
    - name: ensure webhook_download_directory does not exist
      file:
        path: "{{ webhook_download_directory }}"
        state: absent

    - name: create webhook_download_directory
      file:
        path: "{{ webhook_download_directory }}"
        state: directory
        mode: 0755

    - name: download webhook
      unarchive:
        src: "{{ webhook_gh_url }}/{{ webhook_ver }}/webhook-{{ webhook_distro }}.tar.gz"
        dest: "{{ webhook_download_directory }}"
        remote_src: yes
        owner: root
        group: root
        mode: +x

    - name: move to webhook path
      copy:
        src: "{{ webhook_download_directory }}/webhook-{{ webhook_distro }}/webhook"
        dest: "{{ webhook_install_directory }}"
        remote_src: yes
        mode: +x
  when: webhook_is_installed == False or ( webhook_is_installed == True and webhook_download_latest_ver == True and installed_version_registered.stdout != webhook_ver ) or ( webhook_is_installed == True and webhook_download_latest_ver == False and installed_version_registered.stdout != webhook_pinned_ver )

- name: Copy systemd service file
  template:
    src: ../templates/webhook.service.j2
    dest: /etc/systemd/system/webhook.service
    owner: "{{ webhook_user }}"
    group: "{{ webhook_user }}"
    mode: 0644

- name: Enable systemd service
  systemd:
    enabled: true
    daemon-reload: true
    state: started
    name: webhook.service
