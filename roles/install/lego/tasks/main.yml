---

- name: get status of lego_install_path
  stat:
    path: "{{ lego_install_path }}"
  register: is_installed

- name: set lego installed
  set_fact:
    lego_is_installed: "{{ is_installed.stat.exists }}"

- name: check lego version
  shell: "{{ lego_install_path }} --version | awk '{ print $3 }' | cut -c 1-"
  changed_when: false
  register: installed_version_registered
  when: lego_is_installed == True

- name: get latest release
  uri:
    url: https://api.github.com/repos/go-acme/lego/releases/latest
    url_username: "{{ github_api_user | default (omit) }}"
    url_password: "{{ github_api_pass | default (omit) }}"
    return_content: true
    force_basic_auth: "{{ github_api_auth | default (omit) }}"
  register: release_version_registered
  when: lego_download_latest_ver == True

- name: set lego version (latest)
  set_fact:
    lego_ver: "{{ release_version_registered.json.tag_name|regex_replace('v') }}"
  when: lego_download_latest_ver == True

- name: set lego version (pinned)
  set_fact:
    lego_ver: "{{ lego_pinned_ver }}"
  when: lego_download_latest_ver == False

- block:
    - name: ensure lego_download_directory does not exist
      file:
        path: "{{ lego_download_directory }}"
        state: absent

    - name: create lego_download_directory
      file:
        path: "{{ lego_download_directory }}"
        state: directory
        mode: 0755

    - name: download lego
      unarchive:
        src: "{{ lego_gh_url }}/v{{ lego_ver }}/lego_v{{ lego_ver }}_{{ lego_distro }}.tar.gz"
        dest: "{{ lego_download_directory }}"
        remote_src: yes
        owner: root
        group: root
        mode: +x

    - name: move to lego path
      copy:
        src: "{{ lego_download_directory }}/lego"
        dest: "{{ lego_install_directory }}"
        remote_src: yes
        mode: +x
  when: lego_is_installed == False or ( lego_is_installed == True and lego_download_latest_ver == True and installed_version_registered.stdout != lego_ver ) or ( lego_is_installed == True and lego_download_latest_ver == False and installed_version_registered.stdout != lego_pinned_ver )

- name: populate /etc/environment
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^LEGO_DISABLE_CNAME_SUPPORT="
    line: "LEGO_DISABLE_CNAME_SUPPORT=true"
  when: lego_is_installed == False
