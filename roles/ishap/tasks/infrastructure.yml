---
### Create LXCs

- name: Update pveam
  command: pveam update

- name: Download container templates
  command: pveam download NFS {{ item }}
  loop:
    - ubuntu-24.04-standard_24.04-2_amd64.tar.zst
    - debian-11-standard_11.6-1_amd64.tar.zst
    - debian-12-standard_12.2-1_amd64.tar.zst.tmp

- name: Create LXCs w/ VLAN Tags
  proxmox:
    vmid: "{{ item.vmid }}"
    hostname: "{{ item.name }}"
    unprivileged: "{{ not item.privileged }}"
    onboot: "{{ item.onboot | default ('true') }}"
    state: present
    node: ishap
    storage: local-lvm
    disk: "{{ item.disk }}"
    cpus: '1'
    cpuunits: '1000'
    cores: "{{ item.cores }}"
    memory: "{{ item.memory }}"
    swap: "{{ item.swap | default ('512') }}"
    api_user: root@pam
    api_host: localhost
    api_token_id: Ansible
    api_token_secret: "{{ secret_proxmox_api_token }}"
    pubkey: "{{ secret_proxmox_ct_ssh }}"
    password: "{{ secret_proxmox_pass }}"
    netif: "{'net0':'name=eth0,gw={{ item.gw }},ip={{ item.ip }}/24,tag={{ item.tag | default ('50') }},bridge=vmbr1'}"
    ostemplate: "{{ item.template| default ('NFS:vztmpl/ubuntu-24.04-standard_24.04-2_amd64.tar.zst') }}"
    features:
      - nesting={{ item.nesting | default ('1') }}
      # - keyctl={{ item.keyctl | default ('0') }}
  loop: "{{ lxc_vlans }}"

- name: Create LXC CT w/ Mounts
  proxmox:
    vmid: "{{ item.vmid }}"
    hostname: "{{ item.name }}"
    unprivileged: "{{ not item.privileged }}"
    onboot: "{{ item.onboot | default ('true') }}"
    state: present
    node: ishap
    storage: local-lvm
    disk: "{{ item.disk }}"
    cpus: '1'
    cpuunits: '1000'
    cores: "{{ item.cores }}"
    memory: "{{ item.memory }}"
    swap: "{{ item.swap | default ('512') }}"
    api_user: root@pam
    api_host: localhost
    api_token_id: Ansible
    api_token_secret: "{{ secret_proxmox_api_token }}"
    pubkey: "{{ secret_proxmox_ct_ssh }}"
    password: "{{ secret_proxmox_pass }}"
    netif: "{'net0':'name=eth0,gw={{ item.gw }},ip={{ item.ip }}/24,tag={{ item.tag | default ('50') }},bridge=vmbr1'}"
    ostemplate: "{{ item.template| default ('NFS:vztmpl/ubuntu-24.04-standard_24.04-2_amd64.tar.zst') }}"
  loop: "{{ lxc_mounts }}"

- name: Add features to LXC CT w/ Mounts
  shell: pct set {{ item.vmid }} --features nesting={{ item.nesting | default('0') }},mount={{ item.fsmount }}
  loop: "{{ lxc_mounts }}"

- name: Create LXCs on main VLAN
  proxmox:
    vmid: "{{ item.vmid }}"
    hostname: "{{ item.name }}"
    unprivileged: "{{ not item.privileged }}"
    onboot: "{{ item.onboot | default ('true') }}"
    state: present
    node: ishap
    storage: local-lvm
    disk: "{{ item.disk }}"
    cpus: '1'
    cpuunits: '1000'
    cores: "{{ item.cores }}"
    memory: "{{ item.memory }}"
    swap: "{{ item.swap | default ('512') }}"
    api_user: root@pam
    api_host: localhost
    api_token_id: Ansible
    api_token_secret: "{{ secret_proxmox_api_token }}"
    pubkey: "{{ secret_proxmox_ct_ssh }}"
    password: "{{ secret_proxmox_pass }}"
    netif: "{'net0':'name=eth0,gw={{ item.gw }},ip={{ item.ip }}/24,bridge=vmbr0'}"
    ostemplate: "{{ item.template| default ('NFS:vztmpl/ubuntu-24.04-standard_24.04-2_amd64.tar.zst') }}"
    features:
      - nesting={{ item.nesting | default ('1') }}
      # - keyctl={{ item.keyctl | default ('0') }}
  loop: "{{ lxc_main }}"

- name: Create VM from Template
  community.general.proxmox_kvm:
    api_host: localhost
    api_token_id: Ansible
    api_token_secret: "{{ secret_proxmox_api_token }}"
    api_user: root@pam
    clone: ubuntu-template
    full: true
    name: "{{ item.name }}"
    node: ishap
    storage: local-lvm
    newid: "{{ item.vmid }}"
    cores: "{{ item.cores }}"
    onboot: "{{ item.onboot | default ('false') }}"
    memory: "{{ item.memory }}"
    net:
      net0: "virtio,bridge={{ item.bridge | default ('vmbr1') }},tag={{ item.tag | default ('50') }},firewall=1"
  loop: "{{ vm_uefi }}"

- name: Set boot order
  shell: pct set {{ item.lxc }} --startup order={{ item.order }}
  loop:
    - {"lxc":"200", "order":"4"}
    - {"lxc":"202", "order":"2"}
    - {"lxc":"203", "order":"5"}
    - {"lxc":"204", "order":"2"}
    - {"lxc":"311", "order":"1"}

# Add PCI Passthrough to VMs
- name: Get current VM configuration
  shell: "qm config {{ item.vmid }}"
  register: current_vm_config
  changed_when: false
  loop: "{{ vm_uefi }}"

- name: Find next available hostpci slot
  shell: |
    qm config {{ item.vmid }} | grep -E "^hostpci[0-9]:" | sed 's/hostpci\([0-9]\+\):.*/\1/' | sort -n | tail -1
  register: last_hostpci_slot
  changed_when: false
  failed_when: false
  loop: "{{ vm_uefi }}"

- name: Add PCIe passthrough device to VM configuration
  shell: |
    LAST_SLOT=$(qm config {{ item.vmid }} | grep -E "^hostpci[0-9]:" | sed 's/hostpci\([0-9]\+\):.*/\1/' | sort -n | tail -1)
    NEXT_SLOT=$((${LAST_SLOT:-0} + 1))
    qm set {{ item.vmid }} -hostpci${NEXT_SLOT} {{ item.pcie }}
    echo "Added {{ item.pcie }} as hostpci${NEXT_SLOT} to VM {{ item.name }} ({{ item.vmid }})"
  register: add_pcie_result
  loop: "{{ vm_uefi }}"

- name: Display PCIe addition results
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ add_pcie_result.results }}"

# Add USB Passthrough to VMs
- name: Add USB passthrough devices
  shell: |
    VMID="{{ item.0.vmid }}"
    USB_VENDOR="{{ item.1.vendor_id }}"
    USB_PRODUCT="{{ item.1.product_id }}"
    # Find next available USB slot
    LAST_USB=$(qm config $VMID | grep -E "^usb[0-9]:" | sed 's/usb\([0-9]\+\):.*/\1/' | sort -n | tail -1)
    NEXT_USB=$((${LAST_USB:-0} + 1))
    # Add the USB device
    qm set $VMID -usb${NEXT_USB} host=${USB_VENDOR}:${USB_PRODUCT}
    echo "USB device ${USB_VENDOR}:${USB_PRODUCT} added to VM {{ item.0.name }} ($VMID) as usb${NEXT_USB}"
  register: add_usb_results
  with_subelements:
    - "{{ vm_uefi }}"
    - usb_devices
    - flags:
        skip_missing: true

- name: Display USB addition results
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ add_usb_results.results }}"
  when: add_usb_results.results is defined