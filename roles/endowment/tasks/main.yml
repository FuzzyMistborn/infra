---

- name: create directories
  file:
    path: "/home/{{main_username}}/{{ item }}"
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_groupname }}"
  loop:
    - docker
    - docker/diun
    - scripts

- name: Copy scripts
  copy:
    src: "{{item.path}}"
    dest: /home/{{ main_username }}/scripts/{{item.path}}
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: "{{item.mode}}"
  with_items:
    - { path: "auth_commands.sh", mode: "+x" }
    - { path: "nextcloud_cron.sh", mode: "+x" }

- name: Copy backup script templates
  template:
    src: "{{item.src}}"
    dest: /home/{{ main_username }}/scripts/{{item.dest}}
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
  with_items:
    - { src: 'media_backup.sh.j2', dest: 'media_backup.sh' }

#### DIUN
- name: Copy DIUN Config Template
  template:
    src: diun_config.yml.j2
    dest: /home/{{ main_username }}/docker/diun/config.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Update Restic
- name: Update Restic to latest version
  command: "/usr/bin/restic self-update"

### Telegraf
- name: Install Telegraf
  apt:
    deb: https://dl.influxdata.com/telegraf/releases/telegraf_{{telegraf_ver}}-1_amd64.deb
- name: Copy Telegraf config
  template:
    src: telegraf.conf.j2
    dest: /etc/telegraf/telegraf.conf
    owner: root
    group: root
    mode: 0644
- name: Add Telegraf user to docker group
  user:
    name: telegraf
    groups: docker
    append: yes
- name: Enable/Start Telegraf
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: telegraf

#### Mount disks
- name: Set up disks/mounts
  include: disks.yml

### Restic
- name: Add Synology SSH Key
  copy:
    dest: /home/{{ main_username }}/.ssh/synology_restic
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: "{{ secret_synology_restic_key }}"

- name: Check that Synology not already in SSH config
  shell: grep -c "Host synology" /home/{{main_username}}/.ssh/config || true
  register: synology_ssh

- name: Add ssh config for Synology
  lineinfile:
    path: /home/{{ main_username }}/.ssh/config
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0664
    line: |
      Host synology
        HostName 192.168.30.25
        User {{main_username}}
        IdentityFile ~/.ssh/synology_restic
    create: true
  when: synology_ssh.stdout == "0" or synology_ssh.stdout == ""

- name: Update Restic to latest version
  command: "/usr/bin/restic self-update"

- name: Install Autorestic
  shell: curl -s https://raw.githubusercontent.com/CupCakeArmy/autorestic/master/install.sh | sudo bash

- name: Copy Autorestic Config Template
  template:
    src: autorestic.yml.j2
    dest: /home/{{ main_username }}/.autorestic.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Backup Restore
- name: Restore folders from backup
  command: "/usr/local/bin/autorestic restore -f -l {{item.name}} --from {{item.src}} --to {{item.dest}}"
  with_items:
    - { name: "docker", src: 'synology_docker', dest: '/home/{{main_username}}/docker' }
  when: pull_backup == "true"

### Fail2ban Enable
- name: Enable Fail2ban
  lineinfile:
    path: /etc/fail2ban/jail.d/{{item}}.local
    regexp: "^enabled*"
    line: "enabled = true"
  with_items:
    - nextcloud
    - radarr
    - sonarr

#### Cronjobs
- name: "Main User Cronjobs"
  cron:
    user: "{{ main_username }}"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    state: present
  loop:
    - { job: "/home/{{ main_username }}/scripts/nextcloud_cron.sh", name: "Nextcloud", hour: "*", minute: "*/5", weekday: "*" }
    - { job: "/home/{{ main_username }}/scripts/media_backup.sh", name: "Media Backup", hour: "0", minute: "30", weekday: "*" }

### SSH
- name: SSH Keys - Add HASS SSH Key
  authorized_key:
    user: "{{ main_username }}"
    state: present
    key: "{{ secret_hass_ssh }}"