---
### SSH Config
- name: Fix SFTP for Ansible
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    state: present
    regexp: "Subsystem sftp*"
    line: "Subsystem sftp internal-sftp"

- name: Restart ssh
  service:
    name: sshd
    state: restarted

- name: Add SSH Keys
  copy:
    dest: /home/{{ main_username }}/.ssh/{{ item.dest }}
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: "{{ item.key }}"
  with_items:
    - dest: desktop_lxcs
      key: "{{ secret_desktop_lxc_ssh }}"
    - dest: desktop_ambition
      key: "{{ secret_desktop_ambition_ssh }}"
    - dest: github
      key: "{{ secret_github_ssh }}"

- name: Copy template files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
  loop:
    - {src: "hooks.yaml.j2", dest: "/home/{{ main_username }}/.hooks.yaml", mode: "644"}
    - {src: "ssh_config.j2", dest: "/home/{{ main_username }}/.ssh/config", mode: "600"}

### Sudoers file
- name: Add sudoers file for main user
  template:
    src: sudoers_main_user.j2
    dest: /etc/sudoers.d/{{ main_username }}
    owner: root
    group: root
    mode: 0440

### AUR
- name: Install AUR Packages
  kewlfft.aur.aur:
    use: yay
    name:
      - "{{ item.name }}"
    state: present
  become_user: ansible
  become: yes
  with_items:
    - "{{ aur_package_list }}"

- name: Install Steamlink Packages
  kewlfft.aur.aur:
    use: yay
    name: steamlink
    state: present
  become_user: ansible
  become: yes
  when: ansible_hostname != 'kelsier'

### Flatpak
- name: Add the flathub flatpak repository remote
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: system

### fstab/disk mounts
- name: make sure disks unmounted
  mount:
    path: "{{ item.path }}"
    state: unmounted
  with_items:
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"
  when: ansible_hostname != 'hoid'

- name: create /mnt points
  file:
    dest: "{{ item.path }}"
    state: directory
    owner: "{{ main_username }}"
    group: nobody
    mode: 0777
  with_items:
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"
  when: ansible_hostname != 'hoid'

- name: Add smbcredentials
  copy:
    dest: /home/{{ main_username }}/.smbcredentials
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: |
      user=samba
      password={{ secret_samba_pass }}
      domain=cosmere
  when: ansible_hostname != 'hoid'

- name: mount disks
  mount:
    path: "{{ item.path }}"
    src: "{{ item.source }}"
    fstype: "{{ item.fs }}"
    opts: "{{ item.opts }}"
    # change to 'mounted' to auto mount versus 'present' for just loaded into fstab
    state: mounted
  with_items:
    - "{{ nfs_mount }}"
    - "{{ smb_mountpoints }}"
  when: ansible_hostname != 'hoid'

### ZSH
- name: Copy config files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
  with_items:
    - src: "zsh/zshrc"
      dest: "/home/{{ main_username }}/.zshrc"
    - src: "zsh/p10k.zsh"
      dest: "/home/{{ main_username }}/.p10k.zsh"

### Backup/Restore
- name: Create restore script
  copy:
    dest: /home/{{ main_username }}/restore.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      /usr/local/bin/autorestic restore -f -l home --from synology_docker --to /
  when: pull_backup == true
- name: Run restore script
  command: /bin/bash ./restore.sh
  args:
    chdir: "/home/{{ main_username }}"
  when: pull_backup == true
- name: Remove restore script
  file:
    path: /home/{{ main_username }}/restore.sh
    state: absent
  when: pull_backup == true

### Wireguard
- name: Enable IPv4 forwarding for wireguard
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    reload: yes
  when: ansible_hostname != 'hoid'

- name: Create wireguard conf
  copy:
    dest: /etc/wireguard/wg0.conf
    owner: root
    group: root
    mode: 0600
    content: "{{ secret_parents_wireguard_config }}"
  when: ansible_hostname != 'hoid'

### VS Code Extensions
- name: Install extensions
  command: code --install-extension {{ item }}
  become: yes
  become_user: "{{ main_username }}"
  with_items:
    - ms-vscode-remote.remote-ssh
    - ms-python.python
    - ms-azuretools.vscode-docker
    - matthewpi.caddyfile-support
    - keesschollaart.vscode-home-assistant
    - wholroyd.jinja

### CUPS
- name: Add printer and set as default
  command: "{{ item }}"
  become: yes
  become_user: "{{ main_username }}"
  with_items:
    - /usr/sbin/lpadmin -p Brother-HL2270DW -E -v ipp://192.168.10.15/ipp/port1 -o media=na_letter_8.5x11in -m HL2270DW.ppd
    - /usr/bin/lpoptions -d Brother-HL2270DW

### Configure Cinnamon
- name: Create themes folder
  file:
    dest: /home/{{main_username}}/.themes
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0755

- name: Install mint-x-dark
  unarchive:
    src: "https://cinnamon-spices.linuxmint.com/files/themes/Mint-X-Dark.zip?time=1674148583"
    dest: "/home/{{main_username}}/.themes"
    remote_src: yes
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0755

- name: Set Cinnamon themeing with string
  community.general.dconf:
    key: "{{ item.key }}"
    value: "'{{ item.value }}'"
    state: present
  become: yes
  become_user: "{{ main_username }}"
  with_items:
    - "{{ cinnamon_theme_settings_string }}"

- name: Set Cinnamon themeing with value
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
  become: yes
  become_user: "{{ main_username }}"
  with_items:
    - "{{ cinnamon_theme_settings_value }}"

### Final Tweaks
- name: create mpv config folder
  file:
    dest: /home/{{main_username}}/.config/mpv
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0660

- name: Install plugin for MPV to use KDEConnect
  get_url:
    url: https://github.com/hoyon/mpv-mpris/releases/download/0.9/mpris.so
    dest: /home/{{ main_username }}/.config/mpv/scripts
    force: yes
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

- name: create Plank config folder
  file:
    dest: /home/{{main_username}}/.config/plank/dock1/launchers/
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0755

- name: Copy Plank files
  copy:
    src: "{{ item.src }}"
    dest: /home/{{ main_username }}/.config/plank/dock1/launchers/{{ item.dest }}
    mode: 0644
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
  with_items:
    - {src: 'plank/code.dockitem', dest: 'code.dockitem'}
    - {src: 'plank/com.github.iwalton3.jellyfin-media-player.dockitem', dest: 'com.github.iwalton3.jellyfin-media-player.dockitem'}
    - {src: 'plank/ferdium.dockitem', dest: 'ferdium.dockitem'}
    - {src: 'plank/filezilla.dockitem', dest: 'filezilla.dockitem'}
    - {src: 'plank/firefox.dockitem', dest: 'firefox.dockitem'}
    - {src: 'plank/libreoffice-calc.dockitem', dest: 'libreoffice-calc.dockitem'}
    - {src: 'plank/libreoffice-writer.dockitem', dest: 'libreoffice-writer.dockitem'}
    - {src: 'plank/nemo.dockitem', dest: 'nemo.dockitem'}
    - {src: 'plank/org.gnome.Terminal.dockitem', dest: 'org.gnome.Terminal.dockitem'}
    - {src: 'plank/org.kde.kate.dockitem', dest: 'org.kde.kate.dockitem'}
    - {src: 'plank/org.remmina.Remmina.dockitem', dest: 'org.remmina.Remmina.dockitem'}
    - {src: 'plank/thunderbird.dockitem', dest: 'thunderbird.dockitem'}

- name: Copy Redshift config
  template:
    src: redshift.conf.j2
    dest: /home/{{ main_username }}/.config/redshift.conf
    mode: 0644
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

- name: Copy Personal avatar
  copy:
    src: face
    dest: /home/{{ main_username }}/.face
    mode: 0644
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

- name: Copy login screen image
  copy:
    src: WayofKings.jpg
    dest: /usr/share/backgrounds/WayofKings.jpg
    mode: 0644
    owner: root
    group: root

- name: Copy slick-greeter.conf
  copy:
    src: slick-greeter.conf
    dest: /etc/lightdm/slick-greeter.conf
    mode: 0644
    owner: root
    group: root

- name: Check for iGPU
  shell: "lspci | grep VGA | grep -Po 'Intel Corporation HD Graphics'"
  register: igpu
  ignore_errors: true

- name: Intel iGPU Tearing Fix
  copy:
    dest: /etc/X11/xorg.conf.d/20-intel.conf
    owner: root
    group: root
    mode: 0644
    content: |
      Section "Device"
        Identifier "Intel Graphics"
        Driver "intel"
        Option "TripleBuffer" "true"
        Option "TearFree" "true"
      EndSection
  when: igpu.failed == false

- name: Reload Cronie/bluetooth/fstrim
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: "{{ item }}"
  with_items:
    - cronie
    - bluetooth
    - fstrim.timer
  when: ansible_hostname != 'hoid'

- name: enable bluetooth auto-power on
  lineinfile:
    dest: "/etc/bluetooth/main.conf"
    state: present
    regexp: "^AutoEnable"
    line: "AutoEnable=true"
  when: ansible_hostname != 'hoid'

- name: Enable WOL ethtool
  command: ethtool -s enp0s31f6 wol bg
  when: ansible_hostname != 'hoid' and ansible_hostname != 'kelsier'

- name: Enable WOL nmcli
  command: sudo nmcli c modify "Wired connection 1" 802-3-ethernet.wake-on-lan magic
  when: ansible_hostname != 'hoid' and ansible_hostname != 'kelsier'

- name: Fix Delayed Shutdown
  lineinfile:
    dest: "/etc/systemd/system.conf"
    state: present
    regexp: "#DefaultTimeoutStopSec"
    line: "DefaultTimeoutStopSec=15s"

### Logiops
- name: Copy Szeth logid.cfg file
  copy:
    src: szeth_logid.cfg
    dest: /etc/logid.cfg
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == 'szeth'

- name: Allow webhooks through firewalld
  ansible.posix.firewalld:
    port: 8000/tcp
    permanent: true
    state: enabled
    immediate: true

- name: Reload/Enable Systemd processes
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: "{{ item }}"
  with_items:
    - logid
  when: ansible_hostname == 'szeth'
