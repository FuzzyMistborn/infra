---

- name: create config directories
  file:
    path: "/home/{{main_username}}/{{ item }}"
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_groupname }}"
  loop:
    - docker
    - docker/bitwarden_db
    - docker/diun
    - docker/nextcloud_db
    - docker/wallabag_db
    - docker/hass_db
    - docker/influxdb
    - db_backups
    - scripts

### Telegraf
- name: Install Telegraf
  apt:
    deb: https://dl.influxdata.com/telegraf/releases/telegraf_{{telegraf_ver}}-1_amd64.deb
- name: Copy Telegraf config
  template:
    src: telegraf.conf.j2
    dest: /etc/telegraf/telegraf.conf
    owner: root
    group: root
    mode: 0644
- name: Add Telegraf user to docker group
  user:
    name: telegraf
    groups: docker
    append: yes
- name: Enable/Start Telegraf
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: telegraf

#### DIUN
- name: Copy DIUN Config Template
  template:
    src: diun_config.yml.j2
    dest: /home/{{ main_username }}/docker/diun/config.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

- name: Copy db backup script template
  template:
    src: "{{item.src}}"
    dest: /home/{{ main_username }}/scripts/{{item.dest}}
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
  with_items:
    - { src: 'db_backup.sh.j2', dest: 'db_backup.sh' }
    - { src: 'db_restore.sh.j2', dest: 'db_restore.sh' }

### Restic
- name: Update Restic to latest version
  command: "/usr/bin/restic self-update"

- name: Install Autorestic
  shell: curl -s https://raw.githubusercontent.com/CupCakeArmy/autorestic/master/install.sh | sudo bash
  
- name: Copy Autorestic Config Template
  template:
    src: autorestic.yml.j2
    dest: /home/{{ main_username }}/.autorestic.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Backup Restore
- name: Restore folders from backup
  command: "/usr/local/bin/autorestic restore -f -l {{item.name}} --from {{item.src}} --to {{item.dest}}"
  with_items:
    - { name: "db_backups", src: 'synology_db', dest: '/home/{{main_username}}' }
  when: pull_backup == "true"

#### Bash Alias

- name: Setup bash aliases
  lineinfile:
    dest: "/etc/bash_aliases"
    create: yes
    group: root
    line: "alias {{ item.alias }}='{{ item.command }}'"
    mode: 0644
    owner: root
    regexp: "^alias {{ item.alias }}="
  with_items:
    - { alias: "arsnapshot", command: "autorestic exec -av -- snapshots" }
    - { alias: "arbackup", command: "autorestic backup -a" }
    - { alias: "arprune", command: "autorestic forget -a -- prune" }

- name: Source aliases file
  lineinfile:
    dest: /etc/bash.bashrc
    line: 'source /etc/bash_aliases'
    state: present

#### Restore Databases
- name: Run DB Restore Script
  command: /bin/bash ./db_restore.sh
  args:
    chdir: "/home/{{main_username}}/scripts"
  when: pull_backup == "true"

#### Cronjobs
- name: "Main User Cronjobs"
  cron:
    user: "{{ main_username }}"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    day: "{{ item.day }}"
    state: present
  loop:
    - { job: "/home/{{ main_username }}/scripts/db_backup.sh", name: "DB Backup", hour: "0", minute: "45", weekday: "*", day: "*" }
    - { job: "/usr/local/bin/autorestic forget -a -- prune && curl -fsS -m 10 --retry 5 -o /dev/null {{secret_hc_preservation_purge}}", name: "Restic Prune", hour: "22", minute: "45", weekday: "0", day: "*" }
    - { job: "/usr/local/bin/autorestic check && curl -fsS -m 10 --retry 5 -o /dev/null {{secret_hc_restic_check_preservation}}", name: "Restic Check", hour: "2", minute: "45", weekday: "*", day: "1" }