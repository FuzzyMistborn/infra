---

### Basic Setup

- name: Install Proxmoxer
  pip:
    name: proxmoxer

- name: Ensure user groups exists
  group:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ main_username }}"
    - ansible

- name: Add users
  user:
    name: "{{ item.user }}"
    password: "{{ item.pass }}"
    groups: 
      - "{{ item.user }}"
      - sudo
    shell: /bin/bash
  loop:
    - { user: "{{ main_username }}", pass: "{{ secret_main_user_pass }}" }
    - { user: ansible, pass: "{{ secret_ansible_pass }}" }

- name: Add sudoers file for ansible
  copy:
    src: sudoer_ansible
    dest: /etc/sudoers.d/ansible
    owner: root
    group: root
    mode: 0440

- name: SSH Keys
  authorized_key:
    user: "{{ item.user }}"
    state: present
    key: "{{ item.ssh }}"
  loop:
    - { user: "{{ main_username }}", ssh: "{{ secret_main_user_ssh }}" }
    - { user: "{{ main_username }}", ssh: "{{ secret_main_user_alt_ssh }}" }
    - { user: ansible, ssh: "{{ secret_ansible_ssh }}" }

- name: create main user directories
  file:
    path: /home/{{ main_username }}/{{ item }}
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_groupname }}"
  loop:
    - docker
    - docker/diun
    - docker/scrutiny

- name: Copy backup scripts
  copy:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    mode: +x
  loop:
    - { src: "backup.sh", dest: "/root/backup.sh" }

- name: Copy media backup templates
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    mode: +x
  with_items:
    - { src: "media_backup.sh.j2", dest: "/home/{{ main_username }}/media_backup.sh" }

### Wireguard
- name: Install Wireguard
  include: wireguard.yml
  when: install_wireguard == "true"

### Telegraf
- name: Install Telegraf
  apt:
    deb: https://dl.influxdata.com/telegraf/releases/telegraf_{{telegraf_ver}}-1_amd64.deb
- name: Copy Telegraf config
  template:
    src: telegraf.conf.j2
    dest: /etc/telegraf/telegraf.conf
    owner: root
    group: root
    mode: 0644
- name: Add Telegraf user to docker group
  user:
    name: telegraf
    groups: docker
    append: yes
- name: Enable/Start Telegraf
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: telegraf

### DIUN
- name: Copy DIUN Config Template
  template:
    src: diun_config.yml.j2
    dest: /home/{{ main_username }}/docker/diun/config.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Infrastructure
- name: Install Mergerfs
  apt:
    deb: https://github.com/trapexit/mergerfs/releases/download/{{mergerfs_ver}}/mergerfs_{{mergerfs_ver}}.debian-buster_amd64.deb

- name: Set up disks/mounts
  include: disks.yml

- name: Set up containers
  include: infrastructure.yml
  when: infrastructure == "true"

- name: Install samba config
  template:
    src: smb.conf.j2
    dest: /etc/samba/smb.conf
    owner: root
    group: root
- name: Restart samba
  service:
    name: smbd
    state: restarted

#### NUT

- name: Copy nut folder
  copy:
    src: etc/nut/{{item}}
    dest: /etc/nut/{{item}}
    owner: root
    group: nut
    mode: 0640
  with_items:
    - 'nut.conf'
    - 'ups.conf'
    - 'upsd.conf'
    - 'upsd.users'
    - 'upsmon.conf'
  when: install_nut == "true"

- name: Copy NUT script
  copy:
    src: nut.sh
    dest: /home/{{main_username}}
    mode: +x
  when: install_nut == "true"

- name: Run NUT script
  command: /bin/bash ./nut.sh
  args:
    chdir: /home/{{main_username}}
    creates: /home/{{main_username}}/nut.sh
  when: install_nut == "true"

### Restic
- name: Add Synology SSH Key
  copy:
    dest: /home/{{ main_username }}/.ssh/synology_restic
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: 0600
    content: "{{ secret_synology_restic_key }}"

- name: Check that Synology not already in SSH config
  shell: grep -c "Host synology" /root/.ssh/config || true
  register: synology_ssh

- name: Add ssh config for Synology
  lineinfile:
    path: /root/.ssh/config
    owner: root
    group: root
    mode: 0664
    line: |
      Host synology
        HostName 192.168.30.25
        User {{main_username}}
        IdentityFile /home/{{main_username}}/.ssh/synology_restic
    create: true
  when: synology_ssh.stdout == "0" or synology_ssh.stdout == ""

- name: Update Restic to latest version
  command: "/usr/bin/restic self-update"

- name: Install Autorestic
  shell: curl -s https://raw.githubusercontent.com/CupCakeArmy/autorestic/master/install.sh | sudo bash
  
- name: Copy Autorestic Config Template
  template:
    src: autorestic.yml.j2
    dest: /home/{{ main_username }}/.autorestic.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Backup Restore
- name: Restore folders from backup
  command: "/usr/local/bin/autorestic restore -f -l {{item.name}} --from {{item.src}} --to {{item.dest}}"
  with_items:
    - { name: "docker", src: 'synology_docker', dest: '/home/{{main_username}}/docker' }
  when: pull_backup == "true"

### Fail2ban Enable
- name: Enable Fail2ban
  lineinfile:
    path: /etc/fail2ban/jail.d/{{item}}.local
    regexp: "^enabled*"
    line: "enabled = true"
  with_items:
    - jellyfin

### Cron
- name: "Main User Cronjobs"
  cron:
    user: "{{ main_username }}"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    state: present
  with_items:
    - { job: "docker exec scrutiny /scrutiny/bin/scrutiny-collector-metrics run && curl -fsS -m 10 --retry 5 -o /dev/null {{secret_hc_adonalsium_scrutiny}}", name: "Scrutiny", hour: "*/6", minute: "0", weekday: "*" }
    - { job: "docker container restart jellyfin", name: "Restart Jellyfin", hour: "2", minute: "30", weekday: "*" }
- name: "Root Cronjobs"
  cron:
    user: "root"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    state: present
  with_items:
    - { job: "/home/{{ main_username }}/media_backup.sh", name: "Media Backup", hour: "1", minute: "00", weekday: "*" }
