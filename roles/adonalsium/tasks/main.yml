---

### Basic Setup

- name: Install Proxmoxer
  pip:
    name: proxmoxer

- name: Ensure user groups exists
  group:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ main_username }}"
    - ansible

- name: Add users
  user:
    name: "{{ item.user }}"
    password: "{{ item.pass }}"
    groups: 
      - "{{ item.user }}"
      - sudo
    shell: /bin/bash
  loop:
    - { user: "{{ main_username }}", pass: "{{ secret_main_user_pass }}" }
    - { user: ansible, pass: "{{ secret_ansible_pass }}" }

- name: Add samba users
  user:
    name: samba
    password: "!"
    create_home: no

- name: Add samba user password
  shell: "printf '{{ secret_samba_pass }}\n{{ secret_samba_pass }}\n' | smbpasswd -a samba"

- name: Add sudoers file for ansible
  copy:
    src: sudoer_ansible
    dest: /etc/sudoers.d/ansible
    owner: root
    group: root
    mode: 0440

- name: SSH Keys
  authorized_key:
    user: "{{ item.user }}"
    state: present
    key: "{{ item.ssh }}"
  loop:
    - { user: "{{ main_username }}", ssh: "{{ secret_main_user_ssh }}" }
    - { user: "{{ main_username }}", ssh: "{{ secret_main_user_alt_ssh }}" }
    - { user: ansible, ssh: "{{ secret_ansible_ssh }}" }

- name: create main user directories
  file:
    path: /home/{{ main_username }}/{{ item }}
    state: directory
    owner: "{{ main_username }}"
    group: "{{ main_groupname }}"
  loop:
    - docker
    - docker/diun
    - docker/scrutiny

- name: Copy backup scripts
  copy:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    mode: +x
  loop:
    - { src: "backup.sh", dest: "/home/{{secret_main_user}}/backup.sh" }

### udev Rules
- name: Add udev rules
  copy:
    dest: /etc/udev/rules.d/99-usb-serial.rules
    owner: root
    group: root
    mode: 0644
    content: |
      SUBSYSTEM=="tty", ATTRS{idVendor}=="0658", ATTRS{idProduct}=="0200", SYMLINK+="zwave"
      SUBSYSTEM=="tty", ATTRS{idVendor}=="1cf1", ATTRS{idProduct}=="0030", SYMLINK+="conbee"

- name: Update udev
  shell: "sudo service udev reload && sudo udevadm trigger"

### Telegraf
- name: Copy Telegraf config
  template:
    src: telegraf.conf.j2
    dest: /etc/telegraf/telegraf.conf
    owner: root
    group: root
    mode: 0644
- name: Add Telegraf user to docker group
  user:
    name: telegraf
    groups: docker
    append: yes
- name: Enable/Start Telegraf
  systemd:
    enabled: true
    daemon-reload: true
    state: restarted
    name: telegraf

### DIUN
- name: Copy DIUN Config Template
  template:
    src: diun_config.yml.j2
    dest: /home/{{ main_username }}/docker/diun/config.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Infrastructure
- name: Set up disks/mounts
  include: disks.yml

- name: Set up containers
  include: infrastructure.yml
  when: infrastructure == true

- name: Install samba config
  template:
    src: smb.conf.j2
    dest: /etc/samba/smb.conf
    owner: root
    group: root
- name: Restart samba
  service:
    name: smbd
    state: restarted

#### NUT

- name: Copy nut folder
  copy:
    src: etc/nut/{{item}}
    dest: /etc/nut/{{item}}
    owner: root
    group: nut
    mode: 0640
  with_items:
    - 'nut.conf'
    - 'ups.conf'
    - 'upsd.conf'
    - 'upsd.users'
    - 'upsmon.conf'
  when: install_nut == true

- name: Copy NUT script
  copy:
    src: nut.sh
    dest: /home/{{main_username}}
    mode: +x
  when: install_nut == true

- name: Run NUT script
  command: /bin/bash ./nut.sh
  args:
    chdir: /home/{{main_username}}
    creates: /home/{{main_username}}/nut.sh
  when: install_nut == true

### Restic
- name: Copy Autorestic Config Template
  template:
    src: autorestic.yml.j2
    dest: /home/{{ main_username }}/.autorestic.yml
    owner: "{{ main_username }}"
    group: "{{ main_username }}"

### Backup Restore
- name: Create restore script
  copy:
    dest: /home/{{ main_username }}/restore.sh
    owner: "{{ main_username }}"
    group: "{{ main_username }}"
    mode: +x
    content: |
      #!/bin/bash
      /usr/local/bin/autorestic restore -f -l docker --from synology_docker --to /home/{{main_username}}/docker
  when: pull_backup == true
- name: Run restore script
  command: /bin/bash ./restore.sh
  args:
    chdir: "/home/{{main_username}}"
  when: pull_backup == true
- name: Remove restore script
  file:
    path: /home/{{ main_username }}/restore.sh
    state: absent
  when: pull_backup == true

#### Bash Alias

- name: Setup bash aliases
  lineinfile:
    dest: "/etc/bash_aliases"
    create: yes
    group: root
    line: "alias {{ item.alias }}='{{ item.command }}'"
    mode: 0644
    owner: root
    regexp: "^alias {{ item.alias }}="
  with_items:
    - { alias: "arsnapshot", command: "autorestic exec -av -- snapshots" }
    - { alias: "arbackup", command: "autorestic backup -a" }
    - { alias: "arprune", command: "autorestic forget -a -- prune" }

- name: Source aliases file
  lineinfile:
    dest: /etc/bash.bashrc
    line: 'source /etc/bash_aliases'
    state: present

### Wireguard
- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    reload: yes

### Rsyslog
- name: Copy rsyslog config templates
  template:
    src: "{{item.src}}"
    dest: /etc/{{item.dest}}
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'jellyfin.conf.j2', dest: 'rsyslog.d/jellyfin.conf' }

- name: restart rsyslog service
  service:
    name: rsyslog
    enabled: 'true'
    state: restarted

### Cron
- name: "Main User Cronjobs"
  cron:
    user: "{{ main_username }}"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    day: "{{item.day}}"
    state: present
  with_items:
    - { job: "/usr/local/bin/runitor -uuid {{secret_hc_adonalsium_scrutiny}} -- docker exec scrutiny /scrutiny/bin/scrutiny-collector-metrics run > /dev/null 2>&1", name: "Scrutiny", hour: "*/6", minute: "0", weekday: "*", day: "*" }
    - { job: "docker container restart jellyfin > /dev/null 2>&1", name: "Restart Jellyfin", hour: "2", minute: "30", weekday: "*", day: "*" }
    - { job: "/usr/local/bin/runitor -uuid {{secret_hc_adonalsium_purge}} -- /usr/local/bin/autorestic forget -a -- prune", name: "Restic Prune", hour: "1", minute: "00", weekday: "1", day: "*" }
    - { job: "/usr/local/bin/runitor -uuid {{secret_hc_restic_check_adonalsium}} -- /usr/local/bin/autorestic check", name: "Restic Check", hour: "3", minute: "0", weekday: "*", day: "1" }
- name: "Root Cronjobs"
  cron:
    user: "root"
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    hour: "{{ item.hour }}"
    minute: "{{ item.minute }}"
    weekday: "{{ item.weekday }}"
    state: present
  with_items:
    - { job: "/usr/local/bin/runitor -uuid {{secret_hc_adonalsium_media_docker}} -- /usr/local/bin/autorestic backup -l docker -c /home/{{main_username}}/.autorestic.yml", name: "Media Backup (Docker)", hour: "23", minute: "45", weekday: "*" }
    - { job: "/usr/local/bin/runitor -uuid {{secret_hc_adonalsium_media_all}} -- /usr/local/bin/autorestic backup -l photos -l files -l music -l audiobooks -c /home/{{main_username}}/.autorestic.yml", name: "Media Backup (Everything Else)", hour: "1", minute: "15", weekday: "0,3,5" }
