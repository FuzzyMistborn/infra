---
target_os: ubuntu
hostname: virtuosity

nvidia_driver_version: 550

### Install packages with grog.package
package_list:
  - name: curl
  - name: cron
  - name: cifs-utils
  - name: htop
  - name: net-tools
  - name: sudo
  - name: nano
  - name: restic
  - name: wget

pull_backup: false
lnxlink_diskuse: true

### Bash Aliases
bash_docker: true
bash_autorestic: true
bash_systemctl: true
bash_apt: true

### Cronjobs
cronjobs:
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_virtuosity }} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 20
    hour: 22
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_check_virtuosity }} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 20
    hour: 2
    day: 1
  - name: Media Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_backup_virtuosity }} -- /usr/local/bin/autorestic backup -a -c /home/{{ main_username }}/.autorestic.yml
    user: root
    minute: 20
    hour: 0

### Mountpoints
mountpoints:
  - path: "/mnt/immich-uploads"
    source: "//192.168.1.10/Media/Immich"
    fs: cifs
    opts: "defaults,uid=1000,gid=1000,credentials=/home/{{ main_username }}/.smbcredentials"
  - path: "/mnt/photos"
    source: "//192.168.1.10/Media/Photos"
    fs: cifs
    opts: "defaults,uid=1000,gid=1000,credentials=/home/{{ main_username }}/.smbcredentials"

### Autorestic Config
autorestic_config_user: "{{ main_username}}"
autorestic_user_directory: /home/"{{ main_username}}"
autorestic_run_check: false
autorestic_config_yaml:
  version: 2
  backends:
    local_docker:
      type: rest
      path: 'http://192.168.1.5:8500/virtuosity'
      key: "{{ secret_restic_repo_password }}"
      rest:
        user: "{{ secret_restic_rest_user }}"
        password: "{{ secret_restic_rest_password }}"
    b2_ddocker:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/virtuosity"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
  locations:
    docker:
      from: '/home/{{ main_username }}/docker'
      to:
        - local_docker
        - b2_docker
      options:
        forget:
          keep-daily: 1
          keep-weekly: 4
          keep-monthly: 2

### Docker-Compose with ironicbadger.docker_compose_generator
appdata_path: "/home/{{ main_username }}/docker"
containers:
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent:2.25.1
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    include_global_env_vars: false
  ###
  - service_name: whisper
    container_name: whisper
    active: true
    image: ghcr.io/linuxserver/faster-whisper:2.4.0-gpu
    restart: unless-stopped
    ports:
      - "10300:10300"
    volumes:
      - "{{ appdata_path }}/whisper:/data"
    environment:
      - WHISPER_MODEL=base-int8
      - WHISPER_BEAM=5
      - WHISPER_LANG=en
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    include_global_env_vars: true
  ###
  - service_name: ollama-server
    container_name: ollama-server
    active: true
    image: ollama/ollama:0.5.4
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - "/mnt/llms/ollama:/root/.ollama"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    include_global_env_vars: false
  ###
  - service_name: open-webui
    container_name: open-webui
    active: true
    image: ghcr.io/open-webui/open-webui:v0.4.8
    restart: unless-stopped
    ports:
      - "3010:8080"
    volumes:
      - "{{ appdata_path }}/ollama-webui:/app/backend/data"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    include_global_env_vars: false
  ###
  - service_name: stable-diffusion-webui
    container_name: stable-diffusion-webui
    active: true
    image: universonic/stable-diffusion-webui:minimal
    restart: unless-stopped
    command: --no-half --no-half-vae --precision full --medvram-sdxl --xformers --opt-sdp-attention --opt-sdp-no-mem-attention --opt-split-attention --opt-channelslast
    ports:
      - "8080:8080/tcp"
    volumes:
      - "{{ appdata_path }}/stable-diffusion/inputs:/app/stable-diffusion-webui/inputs"
      - "{{ appdata_path }}/stable-diffusion/textual_inversion_templates:/app/stable-diffusion-webui/textual_inversion_templates"
      - "{{ appdata_path }}/stable-diffusion/embeddings:/app/stable-diffusion-webui/embeddings"
      - "{{ appdata_path }}/stable-diffusion/extensions:/app/stable-diffusion-webui/extensions"
      - /mnt/llms/stable-diffusion/models:/app/stable-diffusion-webui/models
      - /mnt/llms/stable-diffusion/outputs:/app/stable-diffusion-webui/outputs
      - "{{ appdata_path }}/stable-diffusion/localizations:/app/stable-diffusion-webui/localizations"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    include_global_env_vars: false
  ###
  - service_name: crowdsec
    container_name: crowdsec
    active: true
    image: crowdsecurity/crowdsec:v1.6.4
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ appdata_path }}/crowdsec/data/acquis.yaml:/etc/crowdsec/acquis.yaml"
      - "{{ appdata_path }}/crowdsec/db:/var/lib/crowdsec/data/"
    environment:
      - COLLECTIONS=gauth-fr/immich
      - GID=1000
      - DISABLE_LOCAL_API=true
      - AGENT_USERNAME={{ hostname }}
      - AGENT_PASSWORD={{ secret_crowdsec_virtuosity_pw }}
      - LOCAL_API_URL=http://{{ secret_ambition_ip }}:8080
    include_global_env_vars: false
  ###
  - service_name: immich-server
    container_name: immich-server
    active: true
    image: ghcr.io/immich-app/immich-server:v1.123.0
    restart: unless-stopped
    ports:
      - "2283:2283"
    volumes:
      - /mnt/immich-uploads:/usr/src/app/upload
      - /mnt/photos:/mnt/photos:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DB_PASSWORD={{ secret_immich_db_pass }}
      - DB_USERNAME=postgres
      - DB_DATABASE_NAME=immich
      - REDIS_HOSTNAME=immich-redis
      - DB_HOSTNAME=immich-database
    include_global_env_vars: false
    depends_on:
      - immich-redis
      - immich-database
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
                - compute
                - video
  ###
  - service_name: immich-machine-learning
    container_name: immich_machine_learning
    active: true
    image: ghcr.io/immich-app/immich-machine-learning:v1.123.0-cuda
    restart: unless-stopped
    volumes:
      - "{{ appdata_path }}/immich/model-cache:/cache"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    include_global_env_vars: false
    depends_on:
      - immich-redis
      - immich-database
  ###
  - service_name: immich-redis
    container_name: immich_redis
    active: true
    image: docker.io/redis:6.2-alpine@sha256:eaba718fecd1196d88533de7ba49bf903ad33664a92debb24660a922ecd9cac8
    restart: always
  ###
  - service_name: immich-database
    container_name: immich_database
    active: true
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      - POSTGRES_PASSWORD={{ secret_immich_db_pass }}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=immich
      - POSTGRES_INITDB_ARGS='--data-checksums'
    volumes:
      - "{{ appdata_path }}/immich/database:/var/lib/postgresql/data"
    restart: always
    command: ["postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
