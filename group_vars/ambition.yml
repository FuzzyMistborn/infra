---
target_os: ubuntu
hostname: ambition

### Install packages with grog.package
package_list:
  - name: curl
  - name: iperf3
  - name: fail2ban
  - name: restic
  - name: rsyslog
  - name: net-tools
  - name: python3
  - name: wget
  - name: wireguard

### Pip Packages
pip_packages:
  - thefuck

### Bash Aliases
bash_docker: true
bash_autorestic: true
bash_systemctl: true
bash_apt: true

pull_backup: true
# hugo_ver: 0.88.1
# lego_ver: 4.4.0

### Cronjobs
cronjobs:
  - name: Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_ambition_db_backup }} -- /home/{{ main_username }}/scripts/db_backup.sh
    user: "{{ main_username }}"
    minute: 0
    hour: 5
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_ambition }} -- /usr/local/bin/autorestic exec -a -- forget --keep-daily 1 --keep-weekly 6 --keep-monthly 3 --prune
#    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_ambition }} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 0
    hour: 6
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_check_ambition }} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 45
    hour: 5
    day: 1
  - name: Cert Update
    job: /usr/local/bin/runitor -uuid {{ secret_hc_ambition_certs }} -- /home/{{ main_username }}/scripts/certs.sh
    user: root
    minute: 0
    hour: 19
    day: 1,15
  - name: Data Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_backup_ambition }} -- /usr/local/bin/autorestic backup -a -c /home/{{ main_username }}/.autorestic.yml
    user: root
    minute: 15
    hour: 5

### UFW Rules
ufw:
  - comment: 'ssh'
    rule: 'allow'
    port: '22'
    proto: 'any'
    route: 'no'
  - comment: 'reverse proxy'
    rule: 'allow'
    port: '80'
    proto: 'tcp'
    route: 'no'
  - comment: 'reverse proxy'
    rule: 'allow'
    port: '443'
    proto: 'tcp'
    route: 'no'
  - comment: 'iperf'
    rule: 'allow'
    port: '5201'
    proto: 'tcp'
    route: 'no'
  - comment: 'rsyslog'
    rule: 'allow'
    port: '{{ secret_rsyslog_port }}'
    proto: 'tcp'
    route: 'no'
  - comment: 'wireguard'
    rule: 'allow'
    port: '51820'
    proto: 'udp'
    route: 'no'
  - comment: 'wireguard tunnel'
    rule: 'allow'
    port: '51282'
    proto: 'udp'
    route: 'no'
  - comment: 'gitea'
    rule: 'allow'
    port: '222'
    proto: 'tcp'
    route: 'no'
  - comment: 'portainer'
    rule: 'allow'
    port: '9001'
    proto: 'tcp'
    route: 'no'
  - comment: 'tailscale adapter'
    rule: 'allow'
    interface: tailscale0
    direction: in
    proto: 'any'
    route: 'no'

### Caddy Config
caddy_systemd_capabilities_enabled: true
caddy_systemd_network_dependency: false
caddy_conf_dir: /home/{{ main_username }}/caddy
caddy_config: "{{ lookup('template', 'roles/ambition/templates/Caddyfile.j2') }}"

### Autorestic Config
autorestic_config_user: "{{ main_username}}"
autorestic_user_directory: /home/"{{ main_username}}"
autorestic_run_check: false
autorestic_config_yaml:
  version: 2
  backends:
    b2_docker:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/linode/docker"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
    b2_db:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/linode/db"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
    b2_certs:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/linode/certs"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
  locations:
    docker:
      from: '/home/{{ main_username }}/docker'
      to:
        - b2_docker
      options:
        backup:
          exclude:
            - '/home/{{ main_username }}/docker/umami'
            - '/home/{{ main_username }}/docker/gitea/mariadb'
        forget:
          keep-daily: 1
          keep-weekly: 6
          keep-monthly: 3
    db:
      from: '/home/{{ main_username }}/db_backups'
      to:
        - b2_db
      options:
        forget:
          keep-daily: 1
          keep-weekly: 6
          keep-monthly: 3
    certs:
      from: '/home/{{ main_username }}/lego'
      to:
        - b2_certs
      options:
        forget:
          keep-daily: 1
          keep-weekly: 4

### Docker-Compose with ironicbadger.docker_compose_generator
appdata_path: "/home/{{ main_username }}/docker"
compose_schema_version: '2.1'
containers:
  ###
  - service_name: diun
    container_name: diun
    active: true
    image: crazymax/diun:4.26.0
    restart: always
    volumes:
      - "{{ appdata_path }}/diun/data:/data"
      - "{{ appdata_path }}/diun/config.yml:/diun.yml:ro"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info
      - LOG_JSON=false
    hostname: "{{ hostname }}"
    include_global_env_vars: true
  ###
  - service_name: uptime
    container_name: uptime
    active: true
    image: louislam/uptime-kuma:1.23.10
    restart: always
    ports:
      - 127.0.0.1:3001:3001
    volumes:
      - "{{ appdata_path }}/uptime:/app/data"
    include_global_env_vars: false
  ###
  - service_name: umami
    container_name: umami
    active: true
    image: ghcr.io/umami-software/umami:mysql-v2.4.1
    restart: always
    ports:
      - 127.0.0.1:3500:3000
    labels:
      - "diun.enable=true"
      - "diun.regopt=ghcr.io"
    environment:
      - DATABASE_URL={{ secret_umami_db_url }}
      - DATABASE_TYPE=mysql
      - HASH_SALT={{ secret_umami_hash }}
    depends_on:
      - umami-db
    include_global_env_vars: false
  ###
  - service_name: umami-db
    container_name: umami-db
    active: true
    image: mariadb:11.2
    restart: always
    volumes:
      - "{{ appdata_path }}/umami/mariadb:/var/lib/mysql"
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_USER=umami
      - MYSQL_PASSWORD={{ secret_umami_db_pass }}
      - MYSQL_DATABASE=umami
    mem_limit: 200M
    include_global_env_vars: false
  ###
  - service_name: gitea
    container_name: gitea
    active: true
    image: gitea/gitea:1.21.3
    restart: always
    ports:
      - "127.0.0.1:3030:3000"
      - "222:222"
    volumes:
      - "{{ appdata_path }}/gitea/data:/data"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - DB_TYPE=mysql
      - DB_HOST=gitea-db:3306
      - DB_NAME=gitea
      - DB_USER=gitea
      - DB_PASSWD={{ secret_gitea_db_pass }}
    include_global_env_vars: false
    depends_on:
      - gitea-db
  ###
  - service_name: gitea-db
    container_name: gitea-db
    active: true
    image: mariadb:11.2
    restart: always
    volumes:
      - "{{ appdata_path }}/gitea/mariadb:/var/lib/mysql"
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_USER=gitea
      - MYSQL_PASSWORD={{ secret_gitea_db_pass }}
      - MYSQL_DATABASE=gitea
    mem_limit: 200M
    include_global_env_vars: false
  ###
  - service_name: drone-gh
    container_name: drone-gh
    active: true
    image: drone/drone:2.21.0
    restart: always
    ports:
      - 127.0.0.1:4000:80
      - 127.0.0.1:9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
      - "{{ appdata_path }}/drone-gh:/data"
    environment:
      - DRONE_DATABASE_DRIVER=sqlite3
      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
      - DRONE_GIT_ALWAYS_AUTH=false
      - DRONE_USER_FILTER=FuzzyMistborn
      - DRONE_USER_CREATE=username:FuzzyMistborn,admin:true
      - DRONE_RPC_SECRET={{ secret_drone_rpc }}
      - DRONE_SERVER_PROTO=https
      - DRONE_SERVER_HOST=github.ci.fuzzymistborn.com
      - DRONE_GITHUB_CLIENT_ID={{ secret_drone_github_id }}
      - DRONE_GITHUB_CLIENT_SECRET={{ secret_drone_github_secret }}
    include_global_env_vars: false
  ###
  - service_name: drone-gitea
    container_name: drone-gitea
    active: true
    image: drone/drone:2.21.0
    restart: always
    ports:
      - 127.0.0.1:4001:80
      - 127.0.0.1:9002:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
      - "{{ appdata_path }}/drone-gitea:/data"
    environment:
      - DRONE_DATABASE_DRIVER=sqlite3
      - DRONE_DATABASE_DATASOURCE=/data/database.sqlite
      - DRONE_GIT_ALWAYS_AUTH=false
      - DRONE_USER_FILTER=FuzzyMistborn
      - DRONE_USER_CREATE=username:FuzzyMistborn,admin:true
      - DRONE_RPC_SECRET={{ secret_drone_rpc }}
      - DRONE_SERVER_PROTO=https
      - DRONE_SERVER_HOST=gitea.ci.fuzzymistborn.com
      - DRONE_GITEA_SERVER=https://git.fuzzymistborn.com
      - DRONE_GITEA_CLIENT_ID={{ secret_drone_gitea_id }}
      - DRONE_GITEA_CLIENT_SECRET={{ secret_drone_gitea_secret }}
    include_global_env_vars: false
  ###
  - service_name: gotify
    container_name: gotify
    active: true
    image: gotify/server:2.4.0
    restart: always
    ports:
      - 127.0.0.1:8090:80
    volumes:
      - "{{ appdata_path }}/gotify:/app/data"
    environment:
      - GOTIFY_DEFAULTUSER_PASS={{ main_username }}
      - GOTIFY_DEFAULTUSER_PASS='{{ secret_gotify_pass }}'
    include_global_env_vars: false
  ###
  - service_name: opengist
    container_name: opengist
    active: true
    image: ghcr.io/thomiceli/opengist:1.5
    restart: unless-stopped
    ports:
      - 127.0.0.1:6157:6157
    volumes:
      - "{{ appdata_path }}/opengist:/opengist"
    include_global_env_vars: false
  ###
  - service_name: pairdrop
    container_name: pairdrop
    active: true
    image: lscr.io/linuxserver/pairdrop:1.10.2
    restart: unless-stopped
    ports:
      - 127.0.0.1:3200:3000
    volumes:
      - "{{ appdata_path }}/pairdrop:/opt/pairdrop"
    environment:
      - RATE_LIMIT=false
      - WS_FALLBACK=true
      - RTC_CONFIG=/opt/pairdrop/rtc.json
    include_global_env_vars: true
  ###
  - service_name: wireguard
    container_name: wireguard
    active: true
    image: fuzzymistborn/wg-easy:stable
    restart: always
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    volumes:
      - "{{ appdata_path }}/wireguard:/etc/wireguard"
    environment:
      - WG_HOST=remote.fuzzymistborn.com
      - PASSWORD={{ secret_wireguard_pass }}
      - WG_PERSISTENT_KEEPALIVE=25
      - WG_DEFAULT_DNS=9.9.9.9, 149.112.112.112
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctl:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    include_global_env_vars: false
  ###
  - service_name: healthchecks
    container_name: healthchecks
    active: true
    image: ghcr.io/linuxserver/healthchecks:3.1.20240101
    restart: always
    ports:
      - 127.0.0.1:8000:8000
    volumes:
      - "{{ appdata_path }}/healthchecks/config:/config"
    environment:
      - SITE_ROOT=https://hc.fuzzymistborn.com
      - SITE_NAME=Cosmere Health Checks
      - DEFAULT_FROM_EMAIL=do_not_reply@fuzzymistborn.com
      - EMAIL_HOST={{ secret_snapraid_smtp_host }}
      - EMAIL_PORT=587
      - EMAIL_HOST_USER={{ secret_snapraid_email_address }}
      - EMAIL_HOST_PASSWORD={{ secret_snapraid_email_pass }}
      - EMAIL_USE_TLS=True
      - SUPERUSER_EMAIL={{ secret_email }}
      - SUPERUSER_PASSWORD={{ secret_healtchecks_pass }}
      - REGENERATE_SETTINGS=True
      - REGISTRATION_OPEN=False
      - SECRET_KEY={{ secret_healthchecks_key }}
      - TELEGRAM_BOT_NAME=Cosmere HealthChecks
      - TELEGRAM_TOKEN={{ secret_healthchecks_tg_token }}
      - DOCKER_MODS=linuxserver/mods:healthchecks-apprise
    include_global_env_vars: true
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent:2.19.4
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    include_global_env_vars: false
