---
target_os: ubuntu
hostname: unity

### Install packages with grog.package
package_list:
  - name: cron
  - name: curl
  - name: nano
  - name: git
  - name: htop
  - name: iputils-ping
  - name: lm-sensors
  - name: net-tools
  - name: nut
  - name: python3
  - name: restic
  - name: rsyslog
  - name: sudo
  - name: wget

### Pip Packages
pip_packages:
  - yamllint
  - thefuck

### Variables
install_nut: true
pull_backup: false

### Bash Aliases
bash_docker: true
bash_autorestic: true
bash_systemctl: true
bash_apt: true

### Cronjobs
cronjobs:
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_unity }} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 0
    hour: 22
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_check_unity }} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 0
    hour: 2
    day: 1
  - name: Media Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_backup_unity }} -- /usr/local/bin/autorestic backup -a -c /home/{{ main_username }}/.autorestic.yml
    user: root
    minute: 0
    hour: 0

### Autorestic Config
autorestic_config_yaml:
  version: 2
  backends:
    synology_docker:
      type: rest
      path: 'http://192.168.30.25:8500/unity'
      key: "{{ secret_restic_repo_password }}"
      rest:
        user: "{{ secret_restic_rest_user }}"
        password: "{{ secret_restic_rest_password }}"
    b2_docker:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/unity/docker"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
  locations:
    docker:
      from: '/home/{{ main_username }}/docker'
      to:
        - synology_docker
        - b2_docker
      options:
        forget:
          keep-daily: 1
          keep-weekly: 8
          keep-monthly: 4

### Docker-Compose with ironicbadger.docker_compose_generator
appdata_path: "/home/{{ main_username }}/docker"
containers:
  ###
  - service_name: rtl433
    container_name: rtl433
    active: true
    image: hertzg/rtl_433:master
    restart: always
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    command:
      - '-Fmqtt://192.168.30.5:1883,user=homeassistant,pass={{ secret_mqtt_pass }},retain=1,devices=rtl_433[/model][/id]'
      - '-Csi'
      - '-R40'
      - '-R41'
    devices:
      - /dev/rtl433:/dev/bus/usb/001/002
    include_global_env_vars: false
  ###
  - service_name: zwavejs
    container_name: zwavejs
    active: true
    image: zwavejs/zwave-js-ui:8.20.0
    restart: always
    ports:
      - 8091:8091
      - 3500:3000
    volumes:
      - "{{ appdata_path }}/zwavejs:/usr/src/app/store"
    devices:
      - /dev/zwave:/dev/zwave
    environment:
      - TZ={{ ntp_timezone }}
    include_global_env_vars: false
  ###
  - service_name: zigbee2mqtt
    container_name: zigbee2mqtt
    active: true
    image: koenkk/zigbee2mqtt:1.32.0
    restart: always
    ports:
      - 8080:8080
    devices:
      - /dev/zigbee:/dev/zigbee
    volumes:
      - "{{ appdata_path }}/zigbee2mqtt:/app/data"
      - /run/udev:/run/udev:ro
    environment:
      - TZ={{ ntp_timezone }}
    include_global_env_vars: false
  ###
  - service_name: diun
    container_name: diun
    active: true
    image: crazymax/diun:4.25.0
    restart: always
    volumes:
      - "{{ appdata_path }}/diun/data:/data"
      - "{{ appdata_path }}/diun/config.yml:/diun.yml:ro"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info
      - LOG_JSON=false
    hostname: "{{ hostname }}"
    include_global_env_vars: true
  ###
  - service_name: remote-api
    container_name: remote-api
    active: true
    image: kekru/docker-remote-api-tls:v0.4.0
    restart: always
    ports:
      - 2376:443
    volumes:
      - "{{ appdata_path }}/docker-api:/data/certs"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CREATE_CERTS_WITH_PW={{ secret_docker_api_tls }}
      - CERT_HOSTNAME=docker-remote.local
    include_global_env_vars: false
  ###
  - service_name: adguard
    container_name: adguard
    active: true
    image: adguard/adguardhome:v0.107.33
    restart: always
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "853:853/tcp"
      - "81:80/tcp"
      - "444:443/tcp"
      - "3000:3000/tcp"
    volumes:
      - "{{ appdata_path }}/adguard/conf:/opt/adguardhome/conf"
      - "{{ appdata_path }}/adguard/work:/opt/adguardhome/work"
    cap_add:
      - NET_ADMIN
    include_global_env_vars: false
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent:2.18.3
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    include_global_env_vars: false