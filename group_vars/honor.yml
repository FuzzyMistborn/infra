---
target_os: ubuntu
hostname: honor

### Install packages with grog.package
package_list:
  - name: curl
  - name: htop
  - name: fail2ban
  - name: net-tools
  - name: sudo
  - name: restic
  - name: wget
  - name: wireguard

### Pip Packages
pip_packages:
  - thefuck

pull_backup: false
# lego_ver: 4.4.0

### Bash Aliases

bash_docker: true
bash_autorestic: true
bash_systemctl: true
bash_apt: true

### Cronjobs
cronjobs:
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_honor }} -- /usr/local/bin/autorestic exec -a -- forget --keep-daily 1 --keep-weekly 8 --keep-monthly 4 --prune
#    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_honor }} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 15
    hour: 22
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_check_honor }} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 15
    hour: 2
    day: 1
  - name: Media Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_backup_honor }} -- /usr/local/bin/autorestic backup -a -c /home/{{ main_username }}/.autorestic.yml
    user: root
    minute: 15
    hour: 0
  - name: Cert Update
    job: /usr/local/bin/runitor -uuid {{ secret_hc_honor_certs }} -- /home/{{ main_username }}/certs.sh
    user: root
    minute: 0
    hour: 19
    day: 1,15
  - name: Wireguard Tunnel Check/Restore
    job: /home/{{ main_username }}/wg-check.sh
    user: root
    minute: '*/5'
  - name: Ambition DynDNS
    job: /usr/local/bin/runitor -uuid {{ secret_hc_ambition_dyndns_check }} -- /home/{{ main_username }}/ddns_vps.sh
    user: "{{ main_username }}"
    minute: '*/10'

### Autorestic Config
autorestic_config_yaml:
  version: 2
  backends:
    synology_docker:
      type: s3
      path: 'http://192.168.30.25:9000/honor'
      key: "{{ secret_restic_repo_password }}"
      env:
        - AWS_ACCESS_KEY_ID: "{{ secret_minio_s3_access_key_id }}"
        - AWS_SECRET_ACCESS_KEY: "{{ secret_minio_s3_access_key }}"
    b2_docker:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/honor"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
  locations:
    docker:
      from: '/home/{{ main_username }}/docker'
      to:
        - synology_docker
        - b2_docker
      options:
        forget:
          keep-daily: 1
          keep-weekly: 8
          keep-monthly: 4

### Caddy Config
caddy_systemd_capabilities_enabled: true
caddy_systemd_network_dependency: false
caddy_conf_dir: /home/{{ main_username }}/caddy
caddy_config: "{{ lookup('template', 'roles/honor/templates/Caddyfile.j2') }}"

### Docker
appdata_path: "/home/{{ main_username }}/docker"
compose_schema_version: '2.1'
containers:
  ###
  - service_name: diun
    container_name: diun
    active: true
    image: crazymax/diun:4.24.0
    restart: always
    volumes:
      - "{{ appdata_path }}/diun/data:/data"
      - "{{ appdata_path }}/diun/config.yml:/diun.yml:ro"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info
      - LOG_JSON=false
    hostname: "{{ hostname }}"
    include_global_env_vars: true
  ###
  - service_name: adguard
    container_name: adguard
    active: true
    image: adguard/adguardhome:v0.107.25
    restart: always
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "853:853/tcp"
      - "81:80/tcp"
      - "444:443/tcp"
      - "3000:3000/tcp"
    volumes:
      - "{{ appdata_path }}/adguard/conf:/opt/adguardhome/conf"
      - "{{ appdata_path }}/adguard/work:/opt/adguardhome/work"
    cap_add:
      - NET_ADMIN
    include_global_env_vars: false
  ###
  - service_name: wireguard
    container_name: wireguard
    active: true
    image: fuzzymistborn/wg-easy:stable
    restart: always
    ports:
      - "51280:51820/udp"
      - "51821:51821/tcp"
    volumes:
      - "{{ appdata_path }}/wireguard:/etc/wireguard"
    environment:
      - WG_HOST={{ secret_wireguard_url }}
      - WG_PORT=51280
      - PASSWORD={{ secret_wireguard_pass }}
      - WG_PERSISTENT_KEEPALIVE=25
      - WG_DEFAULT_DNS=192.168.50.10, 192.168.1.11
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctl:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    include_global_env_vars: false
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent:2.17.1
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    include_global_env_vars: false
  ###
  - service_name: remote-api
    container_name: remote-api
    active: true
    image: kekru/docker-remote-api-tls:v0.4.0
    restart: always
    ports:
      - 2376:443
    volumes:
      - "{{ appdata_path }}/docker-api:/data/certs"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CREATE_CERTS_WITH_PW={{ secret_docker_api_tls }}
      - CERT_HOSTNAME=docker-remote.local
    include_global_env_vars: false
  ###
  - service_name: adguard-sync
    container_name: adguard-sync
    active: true
    image: ghcr.io/linuxserver/adguardhome-sync:0.4.13
    restart: always
    ports:
      - 8080:8080
    volumes:
      - "{{ appdata_path }}/adguardsync/config:/config"
    include_global_env_vars: true
