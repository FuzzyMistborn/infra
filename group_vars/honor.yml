---
target_os: ubuntu
hostname: honor

### Install packages with grog.package
package_list:
  - name: curl
  - name: htop
  - name: net-tools
  - name: sudo
  - name: restic
  - name: wget
  - name: wireguard

pull_backup: false
# lego_ver: 4.4.0

### Bash Aliases

bash_docker: true
bash_autorestic: true
bash_systemctl: true
bash_apt: true

### Cronjobs
cronjobs:
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_honor }} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 15
    hour: 22
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_check_honor }} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 15
    hour: 2
    day: 1
  - name: Media Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_backup_honor }} -- /usr/local/bin/autorestic backup -a -c /home/{{ main_username }}/.autorestic.yml
    user: root
    minute: 15
    hour: 0
  - name: Cert Update
    job: /usr/local/bin/runitor -uuid {{ secret_hc_honor_certs }} -- /home/{{ main_username }}/certs.sh
    user: root
    minute: 0
    hour: 19
    day: 1,15
  - name: Wireguard Tunnel Check/Restore
    job: /home/{{ main_username }}/wg-check.sh
    user: root
    minute: '*/5'
  - name: Ambition DynDNS
    job: /usr/local/bin/runitor -uuid {{ secret_hc_ambition_dyndns_check }} -- /home/{{ main_username }}/ddns_vps.sh
    user: "{{ main_username }}"
    minute: '*/10'

### Autorestic Config
autorestic_config_user: "{{ main_username}}"
autorestic_user_directory: /home/"{{ main_username}}"
autorestic_run_check: false
autorestic_config_yaml:
  version: 2
  backends:
    local_docker:
      type: rest
      path: 'http://192.168.1.5:8500/honor'
      key: "{{ secret_restic_repo_password }}"
      rest:
        user: "{{ secret_restic_rest_user }}"
        password: "{{ secret_restic_rest_password }}"
    b2_docker:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/honor"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
  locations:
    docker:
      from: '/home/{{ main_username }}/docker'
      to:
        - local_docker
        - b2_docker
      options:
        forget:
          keep-daily: 1
          keep-weekly: 8
          keep-monthly: 4

### Caddy Config
caddy_systemd_capabilities_enabled: true
caddy_systemd_network_dependency: false
caddy_conf_dir: /home/{{ main_username }}/caddy
caddy_config: "{{ lookup('template', 'roles/honor/templates/Caddyfile.j2') }}"

### Docker
appdata_path: "/home/{{ main_username }}/docker"
compose_schema_version: '2.1'
containers:
  - service_name: adguard
    container_name: adguard
    active: true
    image: adguard/adguardhome:v0.107.52
    restart: always
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "853:853/tcp"
      - "81:80/tcp"
      - "444:443/tcp"
      - "3000:3000/tcp"
    volumes:
      - "{{ appdata_path }}/adguard/conf:/opt/adguardhome/conf"
      - "{{ appdata_path }}/adguard/work:/opt/adguardhome/work"
    cap_add:
      - NET_ADMIN
    include_global_env_vars: false
  - service_name: crowdsec
    container_name: crowdsec
    active: true
    image: crowdsecurity/crowdsec:v1.6.3
    restart: unless-stopped
    volumes:
      - "{{ appdata_path }}/crowdsec/data/acquis.yaml:/etc/crowdsec/acquis.yaml"
      - /var/log/auth.log:/var/log/ssh/auth.log:ro
      - "{{ appdata_path }}/crowdsec/db:/var/lib/crowdsec/data/"
    environment:
      - COLLECTIONS=crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/sshd
      - GID=1000
      - DISABLE_LOCAL_API=true
      - AGENT_USERNAME={{ hostname }}
      - AGENT_PASSWORD={{ secret_crowdsec_honor_pw }}
      - LOCAL_API_URL=http://{{ secret_ambition_ip }}:8080
    include_global_env_vars: false
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent:2.21.0
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    include_global_env_vars: false
  ###
  - service_name: docker-proxy
    container_name: docker-proxy
    active: true
    image: ghcr.io/linuxserver/socket-proxy:1.26.2
    restart: always
    ports:
      - 2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - LOG_LEVEL=err
      - BUILD=1
      - COMMIT=1
      - CONFIGS=1
      - CONTAINERS=1
      - DISTRIBUTION=1
      - EXEC=1
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - NODES=1
      - PLUGINS=1
      - SERVICES=1
      - SESSSION=1
      - POST=1
    include_global_env_vars: false
  ###
  - service_name: adguard-sync
    container_name: adguard-sync
    active: true
    image: ghcr.io/linuxserver/adguardhome-sync:0.6.12
    restart: always
    ports:
      - 8080:8080
    volumes:
      - "{{ appdata_path }}/adguardsync/config:/config"
    include_global_env_vars: true
