---
target_os: ubuntu
hostname: honor

### Install packages with grog.package
package_list:
  - name: curl
  - name: htop
  - name: fail2ban
  - name: net-tools
  - name: sudo
  - name: restic
  - name: wget
  - name: wireguard

pull_backup: false
# lego_ver: 4.4.0

### Cronjobs
cronjobs:
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{secret_hc_honor_purge}} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 15
    hour: 22
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{secret_hc_restic_check_honor}} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 15
    hour: 2
    day: 1
  - name: Media Backup
    job: /usr/local/bin/runitor -uuid {{secret_hc_honor_media}} -- /usr/local/bin/autorestic backup -a -c /home/{{main_username}}/.autorestic.yml
    user: root
    minute: 15
    hour: 0
  - name: Wireguard Tunnel Check/Restore
    job: /home/{{main_username}}/wg-check.sh
    user: root
    minute: '*/5'

### Autorestic Config
autorestic_locations:
  - name: docker
    from: '/home/{{main_username}}/docker'
    to:
      - synology_docker
      - b2_docker
    options:
      forget:
        daily: 1
        weekly: 8
        monthly: 4

autorestic_backends:
  - name: synology_docker
    type: s3
    path: 'http://192.168.30.25:9000/honor'
    key: "{{ secret_restic_repo_password }}"
    env:
      - AWS_ACCESS_KEY_ID: "{{ secret_minio_s3_access_key_id }}"
      - AWS_SECRET_ACCESS_KEY: "{{ secret_minio_s3_access_key }}"
  - name: b2_docker
    type: b2
    path: '{{ secret_restic_b2_bucket }}:/honor'
    key: "{{ secret_restic_repo_password }}"
    env:
      - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
      - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"

### Caddy Config
caddy_systemd_capabilities_enabled: true
caddy_systemd_network_dependency: false
caddy_conf_dir: /home/{{main_username}}/caddy
caddy_config: "{{ lookup('template', 'roles/honor/templates/Caddyfile.j2') }}"

### Docker
appdata_path: "/home/{{ main_username }}/docker"
compose_schema_version: '2.1'
containers:
  ###
  - service_name: diun
    container_name: diun
    active: true
    image: crazymax/diun:latest
    restart: always
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    volumes:
      - "{{ appdata_path }}/diun/data:/data"
      - "{{ appdata_path }}/diun/config.yml:/diun.yml:ro"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info
      - LOG_JSON=false
    hostname: "{{ hostname }}"
    include_global_env_vars: true
  ###
  - service_name: adguard
    container_name: adguard
    active: true
    image: adguard/adguardhome:latest
    restart: always
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "853:853/tcp"
      - "81:80/tcp"
      - "444:443/tcp"
      - "3000:3000/tcp"
    volumes:
      - "{{ appdata_path }}/adguard/conf:/opt/adguardhome/conf"
      - "{{ appdata_path }}/adguard/work:/opt/adguardhome/work"
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    cap_add:
      - NET_ADMIN
    include_global_env_vars: false
  ###
  - service_name: wireguard
    container_name: wireguard
    active: true
    image: fuzzymistborn/wg-easy:stable
    restart: always
    ports:
      - "51280:51820/udp"
      - "51821:51821/tcp"
    volumes:
      - "{{ appdata_path }}/wireguard:/etc/wireguard"
    environment:
      - WG_HOST={{secret_wireguard_url}}
      - WG_PORT=51280
      - PASSWORD={{secret_wireguard_pass}}
      - WG_PERSISTENT_KEEPALIVE=25
      - WG_DEFAULT_DNS=9.9.9.9, 149.112.112.112
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctl:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    include_global_env_vars: false
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{secret_portainer_key}}
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  ###
  - service_name: remote-api
    container_name: remote-api
    active: true
    image: kekru/docker-remote-api-tls:v0.3.0
    restart: always
    ports:
      - 2376:443
    volumes:
      - "{{ appdata_path }}/docker-api:/data/certs"
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CREATE_CERTS_WITH_PW={{ secret_docker_api_tls }}
      - CERT_HOSTNAME=docker-remote.local
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  ###
  - service_name: adguard-sync
    container_name: adguard-sync
    active: true
    image: ghcr.io/linuxserver/adguardhome-sync
    restart: always
    ports:
      - 8080:8080
    volumes:
      - "{{ appdata_path }}/adguardsync/config:/config"
    labels:
      - "diun.enable=true"
      - "diun.regopt=ghcr.io"
    include_global_env_vars: true
