---
target_os: ubuntu
hostname: preservation

### Install packages with grog.package
package_list:
  - name: acl
  - name: curl
  - name: htop
  - name: net-tools
  - name: sudo
  - name: restic
  - name: wget

pull_backup: false

### LNXLink
lnxlink_diskuse: true

### Bash Aliases
bash_docker: true
bash_autorestic: true
bash_systemctl: true
bash_apt: true

### Cronjobs
cronjobs:
  - name: DB Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_backup_preservation }} -- /home/{{ main_username }}/scripts/db_backup.sh
    user: "{{ main_username }}"
    minute: 45
    hour: 0
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_prune_preservation }} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 45
    hour: 22
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_check_preservation }} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 45
    hour: 2
    day: 1
  - name: PSQL Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_invidious_psql_prune }} -- /home/{{ main_username }}/scripts/postgres_cleanup.sh
    user: "{{ main_username }}"
    minute: 30
    hour: 3
    weekday: 5

### Autorestic Config
autorestic_config_user: "{{ main_username}}"
autorestic_user_directory: /home/"{{ main_username}}"
autorestic_run_check: false
autorestic_config_yaml:
  version: 2
  backends:
    local_db:
      type: rest
      path: 'http://192.168.1.5:8500/preservation'
      key: "{{ secret_restic_repo_password }}"
      rest:
        user: "{{ secret_restic_rest_user }}"
        password: "{{ secret_restic_rest_password }}"
    b2_db:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/preservation"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
  locations:
    db_backups:
      from: '/home/{{ main_username }}/db_backups'
      to:
        - local_db
        - b2_db
      options:
        forget:
          keep-daily: 1
          keep-weekly: 6
          keep-monthly: 3

### Docker-Compose with ironicbadger.docker_compose_generator
appdata_path: "/home/{{ main_username }}/docker"
containers:
  ###
  - service_name: hass-db
    container_name: hass-db
    active: true
    image: mariadb:11.5.2
    restart: always
    ports:
      - 3307:3306
    volumes:
      - "{{ appdata_path }}/hass_db:/var/lib/mysql"
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_DATABASE=homeassistant
      - MYSQL_USER=hass
      - MYSQL_PASSWORD={{ secret_hass_db_pass }}
#    mem_limit: 800M
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  ###
  - service_name: influx-db
    container_name: influx-db
    active: true
    image: influxdb:2.7.10
  #  image: quay.io/influxdb/influxdb:2.1-nightly
  # NOTE: quay.io image does not include influx client.  To install, run following:
  # apt install wget -y
  # wget https://dl.influxdata.com/influxdb/releases/influxdb2-client-2.2.0-linux-amd64.tar.gz
  # tar xvzf influxdb2-client-2.2.0-linux-amd64.tar.gz
  # cp influxdb2-client-2.2.0-linux-amd64/influx /usr/local/bin/
  # rm -r influxdb2-client-2.2.0-linux-amd64
  # rm influxdb2-client-2.2.0-linux-amd64.tar.gz
    restart: always
    ports:
      - 8086:8086
    volumes:
      - "/home/{{ main_username }}/db_backups/influxdb:/media/backup"
      - "{{ appdata_path }}/influx_db/data:/var/lib/influxdb2"
      - "{{ appdata_path }}/influx_db/config:/etc/influxdb2"
    environment:
      #  - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME={{ main_username }}
      - DOCKER_INFLUXDB_INIT_PASSWORD={{ secret_influxdb_pass }}
      - DOCKER_INFLUXDB_INIT_ORG=cosmere
      - DOCKER_INFLUXDB_INIT_BUCKET=Default
      - DOCKER_INFLUXDB_INIT_RETENTION=168h
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN={{ secret_influxdb_token }}
    include_global_env_vars: false
  ###
  - service_name: bitwarden-db
    container_name: bitwarden-db
    active: true
    image: mariadb:11.5.2
    restart: always
    ports:
      - 3308:3306
    volumes:
      - "{{ appdata_path }}/bitwarden_db:/var/lib/mysql"
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_DATABASE=bitwarden_rs
      - MYSQL_USER=bitwarden
      - MYSQL_PASSWORD={{ secret_bitwarden_db_pass }}
    mem_limit: 300M
    include_global_env_vars: false
  ###
  - service_name: nextcloud-db
    container_name: nextcloud-db
    active: true
    image: mariadb:11.5.2
    restart: always
    ports:
      - 3306:3306
    volumes:
      - "{{ appdata_path }}/nextcloud_db:/var/lib/mysql"
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER={{ main_username }}
      - MYSQL_PASSWORD={{ secret_nextcloud_db_pass }}
    mem_limit: 300M
    include_global_env_vars: false
  ###
  - service_name: wallabag-db
    container_name: wallabag-db
    active: true
    image: mariadb:11.5.2
    restart: always
    ports:
      - 3309:3306
    volumes:
      - "{{ appdata_path }}/wallabag_db:/var/lib/mysql"
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_DATABASE=symfony
    mem_limit: 300M
    include_global_env_vars: false
  ###
  - service_name: invidious-db
    container_name: invidious-db
    active: true
    image: postgres:15.8-alpine
    restart: always
    ports:
      - 5432:5432
    volumes:
      - "{{ appdata_path }}/invidious/data:/var/lib/postgresql/data"
      - "{{ appdata_path }}/invidious/config/sql:/config/sql"
      - "{{ appdata_path }}/invidious/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh"
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    environment:
      - POSTGRES_DB=invidious
      - POSTGRES_USER=kemal
      - POSTGRES_PASSWORD={{ secret_invidious_db_pass }}
    mem_limit: 200M
    include_global_env_vars: false
  ###
  - service_name: docker-proxy
    container_name: docker-proxy
    active: true
    image: ghcr.io/linuxserver/socket-proxy:1.26.2
    restart: always
    ports:
      - 2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - LOG_LEVEL=err
      - BUILD=1
      - COMMIT=1
      - CONFIGS=1
      - CONTAINERS=1
      - DISTRIBUTION=1
      - EXEC=1
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - NODES=1
      - PLUGINS=1
      - SERVICES=1
      - SESSSION=1
      - POST=1
    include_global_env_vars: false
  ###
  - service_name: diun
    container_name: diun
    active: true
    image: crazymax/diun:4.28.0
    restart: always
    volumes:
      - "{{ appdata_path }}/diun/data:/data"
      - "{{ appdata_path }}/diun/config.yml:/diun.yml:ro"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info
      - LOG_JSON=false
    hostname: "{{ hostname }}"
    include_global_env_vars: true
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent:2.21.0
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    include_global_env_vars: false
