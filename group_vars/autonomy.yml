---
target_os: ubuntu
hostname: autonomy

### Install packages with grog.package
package_list:
  - name: curl
  - name: cutycapt
  - name: git
  - name: htop
  - name: lm-sensors
  - name: net-tools
  - name: fail2ban
  - name: python
  - name: restic
  - name: rsyslog
  - name: sudo
  - name: wget
  - name: xvfb

### Pip Packages
pip_packages:
  - yamllint
  - thefuck

clone_git: false
pull_backup: false

### Bash Aliases
bash_docker: true
bash_autorestic: true
bash_systemctl: true
bash_apt: true

### Telegraf
telegraf_influx_token: "{{ secret_telegraf_autonomy }}"
telegraf_influx_bucket: Autonomy
telegraf_influx_docker: true

### Cronjobs
cronjobs:
  - name: Traffic AM
    job: /usr/local/bin/runitor -uuid {{ secret_hc_autonomy_traffic }} -- /home/{{ main_username }}/scripts/traffic.sh > /dev/null
    user: "{{ main_username }}"
    minute: '*/10'
    hour: 7-8,16-18
    weekday: 1-5
  - name: Traffic PM
    job: /usr/local/bin/runitor -uuid {{ secret_hc_autonomy_traffic }} -- /home/{{ main_username }}/scripts/traffic.sh > /dev/null
    user: "{{ main_username }}"
    minute: '*/30'
    hour: 9-15
    weekday: 1-5
  - name: NodeRed Github
    job: /usr/local/bin/runitor -uuid {{ secret_hc_autonomy_nr_git }} -- /home/{{ main_username }}/docker/nodered/github_cron.sh
    user: "{{ main_username }}"
    minute: 0
    hour: 23
  - name: Restic Prune
    job: /usr/local/bin/runitor -uuid {{ secret_hc_autonomy_purge }} -- /usr/local/bin/autorestic forget -a -- prune
    user: "{{ main_username }}"
    minute: 0
    hour: 22
    weekday: 1
  - name: Restic Check
    job: /usr/local/bin/runitor -uuid {{ secret_hc_restic_check_autonomy }} -- /usr/local/bin/autorestic exec -a -- check
    user: "{{ main_username }}"
    minute: 0
    hour: 2
    day: 1
  - name: Media Backup
    job: /usr/local/bin/runitor -uuid {{ secret_hc_autonomy_media }} -- /usr/local/bin/autorestic backup -a -c /home/{{ main_username }}/.autorestic.yml
    user: root
    minute: 0
    hour: 0

### Autorestic Config
autorestic_config_yaml:
  backends:
    synology_docker:
      type: s3
      path: 'http://192.168.30.25:9000/autonomy/docker'
      key: "{{ secret_restic_repo_password }}"
      env:
        - AWS_ACCESS_KEY_ID: "{{ secret_minio_s3_access_key_id }}"
        - AWS_SECRET_ACCESS_KEY: "{{ secret_minio_s3_access_key }}"
    synology_hass_docker:
      type: s3
      path: 'http://192.168.30.25:9000/autonomy/hass_docker'
      key: "{{ secret_restic_repo_password }}"
      env:
        - AWS_ACCESS_KEY_ID: "{{ secret_minio_s3_access_key_id }}"
        - AWS_SECRET_ACCESS_KEY: "{{ secret_minio_s3_access_key }}"
    synology_hass_docker_beta:
      type: s3
      path: 'http://192.168.30.25:9000/autonomy/hass_docker_beta'
      key: "{{ secret_restic_repo_password }}"
      env:
        - AWS_ACCESS_KEY_ID: "{{ secret_minio_s3_access_key_id }}"
        - AWS_SECRET_ACCESS_KEY: "{{ secret_minio_s3_access_key }}"
    b2_docker:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/autonomy/docker"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
    b2_hass_docker:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/autonomy/hass_docker"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
    b2_hass_docker_beta:
      type: b2
      path: "{{ secret_restic_b2_bucket }}:/autonomy/hass_docker_beta"
      key: "{{ secret_restic_repo_password }}"
      env:
        - B2_ACCOUNT_ID: "{{ secret_restic_b2_account_id }}"
        - B2_ACCOUNT_KEY: "{{ secret_restic_b2_account_key }}"
  locations:
    docker:
      from: '/home/{{ main_username }}/docker'
      to:
        - synology_docker
        - b2_docker
      options:
        forget:
          keep-daily: 1
          keep-weekly: 8
          keep-monthly: 4
    hass_docker:
      from: '/home/{{ main_username }}/hass_docker'
      to:
        - synology_hass_docker
        - b2_hass_docker
      options:
        forget:
          keep-daily: 1
          keep-weekly: 4
          keep-monthly: 2
    hass_docker_beta:
      from: '/home/{{ main_username }}/hass_docker_beta'
      to:
        - synology_hass_docker_beta
        - b2_hass_docker_beta
      options:
        forget:
          keep-daily: 1
          keep-weekly: 4
          keep-monthly: 2

### Docker-Compose with ironicbadger.docker_compose_generator
appdata_path: "/home/{{ main_username }}/docker"
containers:
  ###
  - service_name: diun
    container_name: diun
    active: true
    image: crazymax/diun:4.20.1
    restart: always
    volumes:
      - "{{ appdata_path }}/diun/data:/data"
      - "{{ appdata_path }}/diun/config.yml:/diun.yml:ro"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info
      - LOG_JSON=false
    hostname: "{{ hostname }}"
    include_global_env_vars: true
  ###
  - service_name: homeassistant
    container_name: HASS
    active: true
    image: homeassistant/home-assistant:stable
    restart: always
    ports:
      - 5315:5315
    network_mode: host
    volumes:
      - "/home/{{ main_username }}/hass_docker:/config"
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/Media:/mnt/Media:ro
    depends_on:
      - mqtt
    include_global_env_vars: false
  ###
  - service_name: hass-beta
    container_name: HASS-Beta
    active: true
    image: homeassistant/home-assistant:beta
    restart: always
    ports:
      - 5316:5316
    network_mode: host
    volumes:
      - "/home/{{ main_username }}/hass_docker_beta:/config"
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - mqtt
    include_global_env_vars: false
  ###
  - service_name: zwavejs
    container_name: zwavejs
    active: true
    image: zwavejs/zwavejs2mqtt:5.12.0
    restart: always
    ports:
      - 8091:8091
      - 3001:3000
    volumes:
      - "{{ appdata_path }}/zwavejs:/usr/src/app/store"
    devices:
      - /dev/zwave:/dev/zwave
    environment:
      - TZ={{ ntp_timezone }}
    include_global_env_vars: false
  ###
  - service_name: deconz
    container_name: deconz
    active: true
    image: marthoc/deconz:2.12.06
    restart: always
    network_mode: host
    devices:
      - /dev/conbee:/dev/ttyACM1
    volumes:
      - "{{ appdata_path }}/deconz:/root/.local/share/dresden-elektronik/deCONZ"
    environment:
      - DECONZ_VNC_MODE=1
      - DECONZ_VNC_PASSWORD={{ secret_deconz_vnc_pass }}
      - DECONZ_WEB_PORT=100
      - DECONZ_WS_PORT=460
      - DECONZ_DEVICE=/dev/ttyACM1
      - TZ={{ ntp_timezone }}
    include_global_env_vars: false
  ###
  - service_name: esphome
    container_name: esphome
    active: true
    image: esphome/esphome:2021.10.3
    restart: always
    network_mode: host
    volumes:
      - "{{ appdata_path }}/esphome:/config"
    include_global_env_vars: false
  ###
  - service_name: iobroker
    container_name: iobroker
    active: true
    image: buanet/iobroker:latest-v5
    restart: always
    ports:
      - 8081:8081  # Main
      - 1881:1881
      - 8082:8082  # Web Server
      - 8087:8087  # Rest API
    volumes:
      - "{{ appdata_path }}/iobroker:/opt/iobroker"
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    environment:
      - LANGUAGE="en_US:en"
    mem_limit: 900M
    include_global_env_vars: false
  ###
  - service_name: mqtt
    container_name: MQTT
    active: true
    image: eclipse-mosquitto:2
    restart: always
    ports:
      - 1883:1883
    volumes:
      - "{{ appdata_path }}/mqtt/config:/mosquitto/config/"
      - "{{ appdata_path }}/mqtt/data:/mosquitto/data/"
      - "{{ appdata_path }}/mqtt/log:/mosquitto/log/"
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  ###
  - service_name: rtl433
    container_name: rtl433
    active: true
    image: hertzg/rtl_433:master
    restart: always
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    command:
      - '-Fmqtt://192.168.30.12:1883,user=homeassistant,pass={{ secret_mqtt_pass }},retain=1,devices=rtl_433[/model][/id]'
      - '-Csi'
      - '-R40'
      - '-R41'
      - '-X n=digoo,m=OOK_PWM,bits=>24,s=464,l=1404,r=1800,t=200,get=@0:{20}:id,get=@20:{4}:event:[2:LOW_BATTERY 6:CLOSE 12:OPEN],unique'
    devices:
      - /dev/rtl433:/dev/bus/usb/001/016
    include_global_env_vars: false
  ###
  - service_name: nodered
    container_name: nodered
    active: true
    image: nodered/node-red:2.1.3
    restart: always
    ports:
      - 1880:1880
    volumes:
      - "{{ appdata_path }}/nodered:/data"
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ={{ ntp_timezone }}
    depends_on:
      - homeassistant
    include_global_env_vars: false
  ###
  - service_name: tasmota
    container_name: tasmota
    active: true
    image: raymondmm/tasmoadmin
    restart: always
    ports:
      - 5555:80
    volumes:
      - "{{ appdata_path }}/tasmota:/data"
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  ###
  - service_name: deepstack
    container_name: deepstack
    active: true
    image: deepquestai/deepstack:latest
    restart: always
    ports:
      - 5001:5000
    volumes:
      - "{{ appdata_path }}/deepstack:/datastore"
    environment:
      - VISION-DETECTION=True
      - VISION-FACE=True
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  ###
  - service_name: deepstack_ui
    container_name: deepstack_ui
    active: true
    image: robmarkcole/deepstack-ui:latest
    restart: always
    ports:
      - 8501:8501
    environment:
      - DEEPSTACK_IP=192.168.30.12
      - DEEPSTACK_PORT=5001
      - DEEPSTACK_API_KEY="{{ secret_deepstack_api }}"
      - DEEPSTACK_TIMEOUT=20
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  - service_name: lms
    container_name: logitech_media_server
    active: true
    image: fuzzymistborn/lms:latest
    restart: always
    network_mode: host
    volumes:
      - "{{ appdata_path }}/lms/data:/var/lib/squeezeboxserver"
      - "{{ appdata_path }}/lms/logs:/var/log/squeezeboxserver"
      - "{{ appdata_path }}/lms/playlists:/mnt/playlists"
    labels:
      - "diun.enable=true"
      - "diun.regopt=docker.io"
    include_global_env_vars: false
  ###
  - service_name: portainer_agent
    container_name: portainer_agent
    active: true
    image: portainer/agent:2.10.0
    restart: always
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    include_global_env_vars: false
