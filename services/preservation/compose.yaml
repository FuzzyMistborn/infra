services:
  hass-db:
    image: mariadb:11.6.2
    container_name: hass-db
    volumes:
      - "{{ appdata_path }}/hass_db:/var/lib/mysql"
    labels:
      - diun.enable=true
      - diun.regopt=docker.io
    ports:
      - 3307:3306
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_DATABASE=homeassistant
      - MYSQL_USER=hass
      - MYSQL_PASSWORD={{ secret_hass_db_pass }}
    restart: always
  influx-db:
    image: influxdb:2.7.11
    container_name: influx-db
    volumes:
      - /home/{{ main_username }}/db_backups/influxdb:/media/backup
      - "{{ appdata_path }}/influx_db/data:/var/lib/influxdb2"
      - "{{ appdata_path }}/influx_db/config:/etc/influxdb2"
    ports:
      - 8086:8086
    environment:
      #  - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME={{ main_username }}
      - DOCKER_INFLUXDB_INIT_PASSWORD={{ secret_influxdb_pass }}
      - DOCKER_INFLUXDB_INIT_ORG=cosmere
      - DOCKER_INFLUXDB_INIT_BUCKET=Default
      - DOCKER_INFLUXDB_INIT_RETENTION=168h
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN={{ secret_influxdb_token }}
    restart: always
  #  image: quay.io/influxdb/influxdb:2.1-nightly
  # NOTE: quay.io image does not include influx client.  To install, run following:
  # apt install wget -y
  # wget https://dl.influxdata.com/influxdb/releases/influxdb2-client-2.2.0-linux-amd64.tar.gz
  # tar xvzf influxdb2-client-2.2.0-linux-amd64.tar.gz
  # cp influxdb2-client-2.2.0-linux-amd64/influx /usr/local/bin/
  # rm -r influxdb2-client-2.2.0-linux-amd64
  # rm influxdb2-client-2.2.0-linux-amd64.tar.gz
  bitwarden-db:
    image: mariadb:11.6.2
    container_name: bitwarden-db
    volumes:
      - "{{ appdata_path }}/bitwarden_db:/var/lib/mysql"
    labels:
      - diun.enable=true
      - diun.regopt=docker.io
    ports:
      - 3308:3306
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_DATABASE=bitwarden_rs
      - MYSQL_USER=bitwarden
      - MYSQL_PASSWORD={{ secret_bitwarden_db_pass }}
    mem_limit: 300M
    restart: always
  nextcloud-db:
    image: mariadb:11.6.2
    container_name: nextcloud-db
    volumes:
      - "{{ appdata_path }}/nextcloud_db:/var/lib/mysql"
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD={{ secret_db_root_pass }}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER={{ main_username }}
      - MYSQL_PASSWORD={{ secret_nextcloud_db_pass }}
    mem_limit: 300M
    restart: always
  invidious-db:
    image: postgres:15.10-alpine
    container_name: invidious-db
    volumes:
      - "{{ appdata_path }}/invidious/data:/var/lib/postgresql/data"
      - "{{ appdata_path }}/invidious/config/sql:/config/sql"
      - "{{ appdata_path }}/invidious/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh"
    labels:
      - diun.enable=true
      - diun.regopt=docker.io
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=invidious
      - POSTGRES_USER=kemal
      - POSTGRES_PASSWORD={{ secret_invidious_db_pass }}
    mem_limit: 200M
    restart: always
  obsidian-livesync:
    image: couchdb:3.4.2
    container_name: obsidian-livesync
    user: 1000:1000
    environment:
      - COUCHDB_USER=obsidian
      - COUCHDB_PASSWORD={{ secret_obsidian_sync_pw }}
    volumes:
      - "{{ appdata_path }}/obsidian/data:/opt/couchdb/data"
      - "{{ appdata_path }}/obsidian/etc/local.ini:/opt/couchdb/etc/local.ini"
    ports:
      - 5984:5984
    restart: unless-stopped
  phpmyadmin:
    image: ghcr.io/linuxserver/phpmyadmin:5.2.1
    container_name: phpmyadmin
    volumes:
      - "{{ appdata_path }}/phpmyadmin:/config"
    ports:
      - 8000:80/tcp
    environment:
      - UID={{ main_uid }}
      - GID={{ main_gid }}
      - PUID={{ main_uid }}
      - PGID={{ main_gid }}
      - TZ={{ ntp_timezone }}
      - PMA_ARBITRARY=1
    restart: unless-stopped
  diun:
    image: crazymax/diun:4.29.0
    container_name: diun
    volumes:
      - "{{ appdata_path }}/diun/data:/data"
      - "{{ appdata_path }}/diun/config.yml:/diun.yml:ro"
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - UID={{ main_uid }}
      - GID={{ main_gid }}
      - PUID={{ main_uid }}
      - PGID={{ main_gid }}
      - TZ={{ ntp_timezone }}
      - LOG_LEVEL=info
      - LOG_JSON=false
    hostname: preservation
    restart: always
  portainer_agent:
    image: portainer/agent:2.26.1
    container_name: portainer_agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    ports:
      - 9001:9001
    environment:
      - AGENT_SECRET={{ secret_portainer_key }}
    restart: always